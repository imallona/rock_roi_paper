---
title: "08_cell_lines_c_figures"
format:
  html:
    toc: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Load packages, load data

```{r, warning=FALSE, message=FALSE}

rm(list=ls())

library(SingleCellExperiment)
library(scran)
library(ggplot2)
library(dplyr)
library(scater)
library(reshape2)
library(UpSetR)
library(limma)
library(cowplot)
library(pheatmap)
library(readr)
library(plotROC)
library(here)
library(rtracklayer)
library(viridis)
library(scDblFinder)
library(bluster)
library(singleCellTK)
library(khroma)
library(BUSpaRse)
library(dittoSeq)
library(ggvenn)
library(GGally)

wd<-"/Users/gimoro/figure_making_paper/rock_roi_paper/08_cell_line_analysis/data"

rdss <- dir(here("08_cell_line_analysis"), "cell_line.sce", 
            recursive = TRUE, full.names = TRUE)
names(rdss) <- gsub(".sce", "", basename(rdss))
rdss

datadir <- dirname(rdss)[1]

sces <- mapply(function(u,v)  {
  rds <- readRDS(u)
  rds$sample_id <- v
  rds$sample_id.barcode <- paste0(v,".",colnames(rds))
  colnames(rowData(rds)) <- c("name", "type", "value")
  g <- grepl("^ENS", rownames(rds))
  rownames(rds)[g] <- paste0(rownames(rds)[g], 
                             "__", rowData(rds)$name[g])
  rowData(rds)$gene_type <- "capture"
  k <- grepl("^ENSG", rownames(rds))
  rowData(rds)$gene_type[k] <- "human_gene"
  k <- grepl("^ENSMUS", rownames(rds))
  rowData(rds)$gene_type[k] <- "mouse_gene"
  k <- grepl("^mt", rowData(rds)$name)
  rowData(rds)$gene_type[k] <- "mouse_mito"
  k <- grepl("^MT", rowData(rds)$name)
  rowData(rds)$gene_type[k] <- "human_mito"
  rds
}, rdss, names(rdss))

sces <- Reduce(cbind, sces)

sces_nd<-readRDS(file.path(wd, "cell_lines_sce_nd-filtered.rds"))

write.table(colnames(sces_nd),"cell_line.txt")

```

### Setting up knitr 

```{r}

knitr::opts_chunk$set(fig.width = 2.7,
               fig.height = 2.7,
               fig.align = "center",
               include = TRUE,
               dev = c("png","svg"),
               cache=TRUE,
               cache.lazy = FALSE,
               warning = TRUE,
               message = TRUE)

```

### Themes

```{r}

rock_roi_theme<-function(){
  theme(axis.text = element_text(size=5), 
        plot.title=element_text(size=7,face="bold",hjust=0.5),
        axis.title=element_text(size=7,face="bold"),
        strip.text=element_text(size=7,face="bold"),
        legend.title=element_text(size=7,face="bold"),
        legend.text=element_text(size=5),
        aspect.ratio=1,
        legend.key.size = unit(0.5, 'cm'),
        legend.margin=margin(0,0,0,0),
        legend.box.margin=margin(-5,-5,-5,-5),
        legend.title.align=0.5,
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
}

rock_roi_theme_multiple_panels<-function(){
    theme(axis.text = element_text(size=5), 
        plot.title=element_text(size=7,face="bold",hjust=0.5),
        axis.title=element_text(size=7,face="bold"),
        strip.text=element_text(size=7,face="bold"),
        aspect.ratio=1,
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        strip.background = element_blank(),
        legend.key.size = unit(0.5, 'cm'),
        legend.title=element_text(size=7,face="bold"),
        legend.text=element_text(size=5),
        legend.margin=margin(0,0,0,0),
        legend.box.margin=margin(-5,-5,-5,-5),
        legend.title.align=0.5,
        panel.border = element_rect(colour = "black", fill = NA))
}

```

## Scale

```{r}

myscale<-c(color("muted")(9), gray="darkgrey", 
             black = "black", darkorange = "darkorange")

# defining colors for samples and for species

names(myscale) <- c("unmod","unmod_roi","rock","egfp_cds","patient","positive","cluster2","cluster3","tdtom_cds","no_detection","doublets","cluster1")

```

## Clustering

```{r}

set.seed(1976)
nn.clusters <- clusterCells(sces_nd, use.dimred="PCA",
                            BLUSPARAM=NNGraphParam(k=70))
table(nn.clusters)
sces_nd$cluster <- nn.clusters

scater::plotUMAP(sces_nd, colour_by="cluster")

table(sces_nd$sample_id, sces_nd$cluster)

mm <- model.matrix(~cluster, 
                   data=as.data.frame(colData(sces_nd)))

lcounts <- logcounts(sces_nd)

col_anno <- colData(sces_nd)[,c("cluster")] %>% as.data.frame

scater::plotUMAP(sces_nd, colour_by = "cluster")


plot3<-scater::plotUMAP(sces_nd, colour_by = "cluster",point_alpha=1,point_size=0.1)+
  scale_color_manual(values = c(myscale[["cluster1"]],myscale[["cluster2"]],myscale[["cluster3"]]))+
  rock_roi_theme()

plot3<-ggrastr::rasterize(plot3, layers='Point', dpi=1000)
plot3

ggsave(file=file.path(datadir,"umap_total.svg"), plot=plot3, width=2.7, height=2.7)

```

## Extracting metadata for GEO

```{r}

sces_nd$annotation[sces_nd$cluster == 1] <- "Loucy"
sces_nd$annotation[sces_nd$cluster == 2] <- "SUP-B15"
sces_nd$annotation[sces_nd$cluster == 3] <- "K562"

cd<-colData(sces_nd)
cd$barcode<-rownames(cd)

to_export<-cd[,c("barcode","annotation")]

#write.csv(to_export,"leukemia_cell_line_annotation.csv")

```

### Dot plot with detection of cell line markers

```{r}

markers<-c("ENSG00000177455.15__CD19","ENSG00000012124.17__CD22","ENSG00000107447.8__DNTT","ENSG00000196549.13__MME","ENSG00000198851.10__CD3E","ENSG00000173762.8__CD7","ENSG00000105383.15__CD33","ENSG00000170180.22__GYPA")

short_markers<-as.vector(sapply(strsplit(markers,"__"),"[",2))
short_sces<-sces_nd[markers,]
rownames(short_sces)<-short_markers

plot11<-dittoDotPlot(short_sces,
             short_markers,
             group.by="cluster",
             min.color="grey", 
             max.color=myscale[["positive"]],
             scale=FALSE,
             size=7)+
  rock_roi_theme()

plot11<-ggrastr::rasterize(plot11, layers='Point', dpi=1000)

plot11

ggsave(file=file.path(datadir,"markers.svg"), plot=plot11, width=2.7, height=2.7)

```

### Reading in the cbs from bwa aln

```{r}

new_bwa_aln <- read.table("~/figure_making_paper/rock_roi_paper/08_cell_line_analysis/data/bwa_aln_with_cb_ub_annotated_fusion.txt", quote="\"", comment.char="")

colnames(new_bwa_aln)<-c("seqID","patternName","start","CB","UB")

sub_new_bwa_aln<-new_bwa_aln[,c("patternName","start","CB")]
sub_new_bwa_aln$CB<-sapply(strsplit(sub_new_bwa_aln$CB,"CB:Z:"),"[",2)

# filtering the start position for the fusions --> want an overlap of at least 10 for both BCR and ABL

filt<-filter(sub_new_bwa_aln,patternName %in% c("BCRABL1e14a2","BCRABL1e13a2","BCRABLe1a2") & start > 10 & start < 170)
non_filt<-sub_new_bwa_aln[! sub_new_bwa_aln$patternName %in% c("BCRABL1e14a2","BCRABL1e13a2","BCRABLe1a2"),]

filt_sub_new_bwa_aln<-bind_rows(filt,non_filt)

# filtering check

table(filt_sub_new_bwa_aln[which(filt_sub_new_bwa_aln$patternName %in% c("BCRABL1e14a2","BCRABL1e13a2","BCRABLe1a2")),]$start)

# counting the alignments for each CB

filt_sub_new_bwa_aln$BCRABL1e14a2<-0
filt_sub_new_bwa_aln$BCRABL1e13a2<-0
filt_sub_new_bwa_aln$BCRABL1e1a2<-0
filt_sub_new_bwa_aln$wt_BCR<-0
filt_sub_new_bwa_aln$wt_ABL<-0

table(filt_sub_new_bwa_aln$patternName)

filt_sub_new_bwa_aln$BCRABL1e14a2[which(filt_sub_new_bwa_aln$patternName=="BCRABL1e14a2")]<-1
filt_sub_new_bwa_aln$BCRABL1e13a2[which(filt_sub_new_bwa_aln$patternName=="BCRABLe13a2")]<-1
filt_sub_new_bwa_aln$BCRABL1e1a2[which(filt_sub_new_bwa_aln$patternName=="BCRABLe1a2")]<-1
filt_sub_new_bwa_aln$wt_BCR[which(filt_sub_new_bwa_aln$patternName %in% c("ENST00000359540.7_BCRABLe13a2","ENST00000359540.7_BCRABLe14a2","ENST00000359540.7_BCRABLe1a2"))]<-1
filt_sub_new_bwa_aln$wt_ABL[which(filt_sub_new_bwa_aln$patternName %in% c("ENST00000318560.6","ENST00000372348.7"))]<-1

cb_harmonized_sub_output_bwa_aln<-filt_sub_new_bwa_aln[which(filt_sub_new_bwa_aln$CB %in% colnames(sces_nd)),]

# have duplicate rows

summed_cb_harmonized_sub_new_bwa_aln<-aggregate(cb_harmonized_sub_output_bwa_aln[4:ncol(cb_harmonized_sub_output_bwa_aln)],cb_harmonized_sub_output_bwa_aln['CB'], FUN=sum)

df<-data.frame(matrix(ncol=length(colnames(summed_cb_harmonized_sub_new_bwa_aln)),nrow=length(setdiff(colnames(sces_nd),summed_cb_harmonized_sub_new_bwa_aln$CB))))

colnames(df)<-colnames(summed_cb_harmonized_sub_new_bwa_aln)

df$CB<-setdiff(colnames(sces_nd),cb_harmonized_sub_output_bwa_aln$CB)
df$BCRABL1e14a2<-0
df$BCRABL1e13a2<-0
df$BCRABL1e1a2<-0
df$wt_BCR<-0
df$wt_ABL<-0

full_summed_cb_harmonized_sub_output_new_bwa_aln<-rbind(summed_cb_harmonized_sub_new_bwa_aln,df)

rownames(full_summed_cb_harmonized_sub_output_new_bwa_aln)<-full_summed_cb_harmonized_sub_output_new_bwa_aln$CB

full_summed_cb_harmonized_sub_output_new_bwa_aln<-full_summed_cb_harmonized_sub_output_new_bwa_aln[colnames(sces_nd), , drop = FALSE]

# since just want yes or no and not counts and didn't do UMI deduplication --> convert all numbers to 1 or 0

full_summed_cb_harmonized_sub_output_new_bwa_aln[which(full_summed_cb_harmonized_sub_output_new_bwa_aln$BCRABL1e14a2>0),"BCRABL1e14a2"]<-1
full_summed_cb_harmonized_sub_output_new_bwa_aln[which(full_summed_cb_harmonized_sub_output_new_bwa_aln$BCRABL1e13a2>0),"BCRABL1e13a2"]<-1
full_summed_cb_harmonized_sub_output_new_bwa_aln[which(full_summed_cb_harmonized_sub_output_new_bwa_aln$BCRABL1e1a2>0),"BCRABL1e1a2"]<-1
full_summed_cb_harmonized_sub_output_new_bwa_aln[which(full_summed_cb_harmonized_sub_output_new_bwa_aln$wt_BCR>0),"wt_BCR"]<-1
full_summed_cb_harmonized_sub_output_new_bwa_aln[which(full_summed_cb_harmonized_sub_output_new_bwa_aln$wt_ABL>0),"wt_ABL"]<-1

sces_nd$new_bwa_aln_BCRABL1e14a2<-full_summed_cb_harmonized_sub_output_new_bwa_aln$BCRABL1e14a2
sces_nd$new_bwa_aln_BCRABL1e1a2<-full_summed_cb_harmonized_sub_output_new_bwa_aln$BCRABL1e1a2
sces_nd$new_bwa_aln_BCRABL1e13a2<-full_summed_cb_harmonized_sub_output_new_bwa_aln$BCRABL1e13a2
sces_nd$new_bwa_aln_wt_BCR<-full_summed_cb_harmonized_sub_output_new_bwa_aln$wt_BCR
sces_nd$new_bwa_aln_wt_ABL<-full_summed_cb_harmonized_sub_output_new_bwa_aln$wt_ABL

```

### New bwa aln plots

```{r}

positive_cells <- sces_nd$new_bwa_aln_BCRABL1e14a2> 0

sces_nd <- sces_nd[, order(positive_cells)]

plot1<-scater::plotUMAP(sces_nd, colour_by = "new_bwa_aln_BCRABL1e14a2",point_alpha=1,point_size=0.1)+ 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high=myscale["positive"])+
  rock_roi_theme()


plot1<-ggrastr::rasterize(plot1, layers='Point', dpi=1000)

plot1

ggsave(file=file.path(datadir,"umap_major.svg"), plot=plot1, width=2.7, height=2.7)

# same for minor fusion

positive_cells <- sces_nd$new_bwa_aln_BCRABL1e1a2 > 0

sces_nd <- sces_nd[, order(positive_cells)]

plot2<-scater::plotUMAP(sces_nd, colour_by = "new_bwa_aln_BCRABL1e1a2",point_alpha=1,point_size=0.1)+ 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high=myscale["positive"])+
  rock_roi_theme()

plot2<-ggrastr::rasterize(plot2, layers='Point', dpi=1000)

plot2

ggsave(file=file.path(datadir,"umap_minor.svg"), plot=plot2, width=2.7, height=2.7)


cd<-colData(sces_nd)

df<-data.frame(matrix(nrow=2,ncol=3))

rownames(df)<-c("new_bwa_aln_BCRABL1e14a2","new_bwa_aln_BCRABL1e1a2")
colnames(df)<-c("cluster_1","cluster_2","cluster_3")

for (i in rownames(df)){
  name<-i
  df[i,1]<-length(which(cd[which(cd$cluster=="1"),][,name]>0))/length(which(cd$cluster=="1"))*100
  df[i,2]<-length(which(cd[which(cd$cluster=="2"),][,name]>0))/length(which(cd$cluster=="2"))*100
  df[i,3]<-length(which(cd[which(cd$cluster=="3"),][,name]>0))/length(which(cd$cluster=="3"))*100
}

plottable<-melt(df)
plottable$id<-rep(c("major","minor"),3)
plottable$value

plot5<-ggplot(plottable,aes(x = factor(id,levels=c("major","minor")), 
                        y = value, 
                        fill = variable,
                        colour = variable, group = variable)) +
  geom_bar(position = position_dodge2(), stat = "identity") +
  geom_text(aes(label = round(value, 1), 
                y = value+1.5), colour = "black",
            position = position_dodge2(width = 1),
            size=2,
            vjust=-0.2) +
  ylab("Percent cells expressed")+
  scale_fill_manual(labels=unique(plottable$variable),
                    values=c(myscale[["cluster1"]],myscale[["cluster2"]],myscale[["cluster3"]]))+
  scale_color_manual(labels=unique(plottable$variable),
                    values=c(myscale[["cluster1"]],myscale[["cluster2"]],myscale[["cluster3"]]))+
  xlab("")+
  theme_bw()+
  rock_roi_theme()

plot5<-ggrastr::rasterize(plot5, layers='Point', dpi=1000)
plot5

ggsave(file=file.path(datadir,"fusion_barplot.svg"), plot=plot5, width=3.5, height=2.7)

```

### SessionInfo

```{r}

sessionInfo()

```



