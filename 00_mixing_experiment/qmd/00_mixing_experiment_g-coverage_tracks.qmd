---
title: "00_mixing_experiment_g-coverage_tracks"
author: "Mark Robinson, Izaskun Mallona & Giulia Moro"
format: 
  html:
    toc: true
    embed-resources: true
    keep_md: true
---

### Info

```{r}

# the .bam files were generated on barbara from the cb_ub_filt_twice files 
# they are then filtered based on the barcodes in the sce_nd (filtered / doublet removed / information on mouse vs human species)
# same colors as 00_mixing_experient_f-paper_figures are used for samples / mouse vs human 

```


### Load packages

```{r,warning=FALSE, message=FALSE}

rm(list=ls())

library(GenomicRanges)
library(GenomicAlignments)
library(rtracklayer)
library(Gviz)
library(plyranges)
library(seqinr)
library(Rsamtools)
library(googlesheets4)
library(tools)
library(khroma)
library(here)

```

### Setting up knitr 

```{r}

library(knitr)

knitr::opts_chunk$set(fig.width = 6,
               fig.height = 6,
               fig.align = "center",
               include = TRUE,
               dev = c("png","svg"),
               cache.lazy = FALSE,
               cache=TRUE,
               warning = TRUE,
               message = TRUE)

```

### Loading colors 

```{r}

myscale<-c(color("muted")(9), gray="darkgrey", 
             black = "black", darkorange = "darkorange",
             yellowgreen = "yellowgreen")

# defining colors for samples and for species

names(myscale) <- c("unmod","unmod_roi","rock","egfp_cds","rockroi","human","unknown","mouse","tdtomato_cds","no_detection","doublets","low","high")

#plot(1:13, col=myscale, pch=19, cex=4)

```

### Importing sce_nd file for barcodes / species 

```{r}

rdss <- dir(here("00_mixing_experiment"), "^mixing.*rds$", 
            recursive = TRUE, full.names = TRUE)
datadir <- dirname(rdss)[1]

sce_nd<-readRDS(file.path(datadir, "sce_nd.rds"))
sce_nd$sample_id<-gsub("mixing_", "", sce_nd$sample_id)

```

### Importing .gtf file 

```{r}

options(ucscChromosomeNames=FALSE)

gtf<-dir(here("00_mixing_experiment"), ".*gtf", 
            recursive = TRUE, full.names = TRUE)

combined_gtf<-import(gtf)

```

### Importing excel sheet

```{r}

# read annotation info from GS
anno_url <- "https://docs.google.com/spreadsheets/d/1cvldF_VFA7FYuChoR9a4SIpYcZ1aS80yThNT3iP4T00/edit#gid=978414281"
anno_df <- read_sheet(anno_url, "transcript-regions-mark") %>%
  filter(Experiment=="Mixing")
regs <- split(anno_df$Name_in_gtf_file, anno_df$region_name)
names(regs)<-c("egfp_cds","egfp_roi","egfp_tx","tdtomato_cds","tdtomato_roi1","tdtomato_roi2","tdtomato_tx")

```

### Annotation tracks

```{r}

gms<-list()
chr<-c("egfp","tdtomato")


for (x in chr){
   gm <- GeneRegionTrack(combined_gtf[which(seqnames(combined_gtf)==x),],
                           chromosome=x,
                           name=x,
                           geneSymbol=TRUE,
                           showId=TRUE,
                           transcriptAnnotation="gene")
  
  gm@range$gene<-combined_gtf[which(seqnames(combined_gtf)==x),]$gene_id
  wanted_regions<-regs[[paste0(x,"_tx")]]
  gm@range<-gm@range[which(gm@range$gene %in% wanted_regions)]

  displayPars(gm) <- list(fill=ifelse(gm@range$gene %in% gm@range$gene[grep("utr",gm@range$gene)], "white", myscale[[paste0(x,"_cds")]]))
  
  displayPars(gm)<-list(col="black",
                           cex.group=0.5,
                           col.line="black",
                           fontcolor.group="black",
                           background.title=myscale[[paste0(x,"_cds")]])
  gms[[x]]<-gm
}

```

### Reading .bam files

```{r}

bam<-dir(here("00_mixing_experiment"), "*.bam", 
            recursive = TRUE, full.names = TRUE)

names(bam) <- gsub(".bam", "", basename(bam))
names(bam) <- gsub("sub_", "",names(bam))

datadir <- dirname(bam)[1] # folder where the .bam files are 

for (i in 1:length(bam)){
  indexBam(bam[[i]])
}

```

### Defining barcodes

```{r}

barcodes<-list()
for (i in unique(sce_nd$sample_id)){
  barcodes[[i]]<-colnames(sce_nd[,sce_nd$sample_id==i])
}

```

### Plots for all .bam files for eGFP and tdTomato with subsetting .bam file for barcodes

```{r}

bam_coverages<-list()
bam_coverages_overlayed<-list()

chr<-c("egfp","tdtomato")

modality<-c("unmod","unmod_roi","rock","rockroi")

for (x in chr){
  params<-list()
  gals<-list()
  for (k in names(barcodes)){
    z<- GRanges(x, IRanges(start(gm@range)[1]-500,max(end(gm@range))))
    params[[k]] <- ScanBamParam(which=z,
                        what=c("qname"),
                        tag="CB",
                        tagFilter=list(CB=barcodes[[k]]))
    gals[[paste0("tso_",k)]] <- readGAlignments(bam[[paste0("tso_",k)]], use.names = TRUE, param=params[[k]])
    gals[[paste0("wta_",k)]] <- readGAlignments(bam[[paste0("wta_",k)]], use.names = TRUE, param=params[[k]])
  }

  coverage_chr<-list()
  covs<-lapply(gals,coverage)
  covs<-lapply(covs,function(x) as(x,"GRanges"))
  
  for (i in 1:length(covs)){
  covs[[i]]<-DataTrack(covs[[i]],
                            chromosome=x,
                            name=names(covs)[[i]])
  }
  
  for (i in names(covs)){
    displayPars(covs[[i]])<-list(fill.histogram=TRUE)
  }
  
  tso<- grep("tso",names(covs))
  wta<- grep("wta",names(covs))
  
  for (i in tso){
    displayPars(covs[[i]])<-list(col.histogram="gray",
                                           fill.histogram="gray",
                                           alpha.title = 1, 
                                           alpha = 0.7)
    covs[[i]]@name<-gsub("tso_","",covs[[i]]@name)
  }

  for (i in wta){
    displayPars(covs[[i]])<-list(col.histogram="grey22",
                                           fill.histogram="grey22",
                                           alpha.title = 1, 
                                           alpha = 0.7)
    covs[[i]]@name<-gsub("wta_","",covs[[i]]@name)
  }

  overlays_bam<-list()

  for (i in modality){
    overlays_bam[[paste0(i,"_",x)]]<-OverlayTrack(trackList=list(covs[[paste0("wta_",i)]],covs[[paste0("tso_",i)]]))
    
    displayPars(overlays_bam[[paste0(i,"_",x)]])<-list(background.title=myscale[[i]])
  }
  
  ranges<-c()
  for (i in names(covs)){
      ranges[i]<-max(range(c(values(covs[[i]]), 
                     values(covs[[i]]))))
  }

  plotTracks(c(
           overlays_bam,
           gms[[x]]),
           type="histogram",
           from=start(gms[[x]]@range)[1]-500,
           to=gms[[x]]@end,
           cex.axis = 0.5,
           cex.title=0.5,
           col.axis="white",
           col.title="white",
           col.border.title="white",
           showSampleNames = TRUE,
           lwd.title=0.5,
           ylim=c(0,max(ranges)))
  
    bam_coverages[[x]]<-covs
    bam_coverages_overlayed[[x]]<-overlays_bam
}

```

### Separating mouse vs human based on barcodes

```{r}

mouse<-sce_nd[,sce_nd$species=="mouse"]
human<-sce_nd[,sce_nd$species=="human"]

barcodes_mouse<-list()
for (i in unique(mouse$sample_id)){
  barcodes_mouse[[i]]<-colnames(mouse[,mouse$sample_id==i])
  
}

barcodes_human<-list()
for (i in unique(human$sample_id)){
  barcodes_human[[i]]<-colnames(human[,human$sample_id==i])
  
}

```


### Coloring mouse by TSO and WTA

```{r}

bam_coverages_mouse<-list()
bam_coverages_overlayed_mouse<-list()

chr<-c("egfp","tdtomato")

modality<-c("unmod","unmod_roi","rock","rockroi")

for (x in chr){
  params_mouse<-list()
  gals_mouse<-list()
  for (k in names(barcodes_mouse)){
    z<- GRanges(x, IRanges(start(gm@range)[1]-500,max(end(gm@range))))
    params_mouse[[k]] <- ScanBamParam(which=z,
                        what=c("qname"),
                        tag="CB",
                        tagFilter=list(CB=barcodes_mouse[[k]]))
    gals_mouse[[paste0("tso_",k)]] <- readGAlignments(bam[[paste0("tso_",k)]], use.names = TRUE, param=params_mouse[[k]])
    gals_mouse[[paste0("wta_",k)]] <- readGAlignments(bam[[paste0("wta_",k)]], use.names = TRUE, param=params_mouse[[k]])
  }

  coverage_chr_mouse<-list()
  covs_mouse<-lapply(gals_mouse,coverage)
  covs_mouse<-lapply(covs_mouse,function(x) as(x,"GRanges"))
  
  for (i in 1:length(covs_mouse)){
  covs_mouse[[i]]<-DataTrack(covs_mouse[[i]],
                            chromosome=x,
                            name=names(covs_mouse)[[i]])
  }
  
  for (i in names(covs_mouse)){
    displayPars(covs_mouse[[i]])<-list(fill.histogram=TRUE)
  }
  
  tso<- grep("tso",names(covs_mouse))
  wta<- grep("wta",names(covs_mouse))
  
  for (i in tso){
    displayPars(covs_mouse[[i]])<-list(col.histogram=myscale[["mouse"]],
                                           fill.histogram=myscale[["mouse"]],
                                           alpha.title = 1, 
                                           alpha = 1)
    covs_mouse[[i]]@name<-gsub("tso_","",covs_mouse[[i]]@name)
  }

  for (i in wta){
    displayPars(covs_mouse[[i]])<-list(col.histogram=myscale[["mouse"]],
                                           fill.histogram=myscale[["mouse"]],
                                           alpha.title = 1, 
                                           alpha = 0.3)
    covs_mouse[[i]]@name<-gsub("wta_","",covs_mouse[[i]]@name)
  }

  overlays_bam_mouse<-list()

  for (i in modality){
    overlays_bam_mouse[[paste0(i,"_",x)]]<-OverlayTrack(trackList=list(covs_mouse[[paste0("wta_",i)]],covs_mouse[[paste0("tso_",i)]]))
    
    displayPars(overlays_bam_mouse[[paste0(i,"_",x)]])<-list(background.title=myscale[[i]])
  }
  
  ranges<-c()
  for (i in names(covs_mouse)){
      ranges[i]<-max(range(c(values(covs_mouse[[i]]), 
                     values(covs_mouse[[i]]))))
  }

  plotTracks(c(
           overlays_bam_mouse,
           gms[[x]]),
           type="histogram",
           from=start(gms[[x]]@range)[1]-500,
           to=gms[[x]]@end,
           cex.axis = 0.5,
           cex.title=0.5,
           col.axis="white",
           col.title="white",
           col.border.title="white",
           showSampleNames = TRUE,
           lwd.title=0.5,
           ylim=c(0,max(ranges)))
  
    bam_coverages_mouse[[x]]<-covs_mouse
    bam_coverages_overlayed_mouse[[x]]<-overlays_bam_mouse
}

```


### Coloring plots for human

```{r}

bam_coverages_human<-list()
bam_coverages_overlayed_human<-list()

chr<-c("egfp","tdtomato")

modality<-c("unmod","unmod_roi","rock","rockroi")

for (x in chr){
  params_human<-list()
  gals_human<-list()
  for (k in names(barcodes_human)){
    z<- GRanges(x, IRanges(start(gm@range)[1]-500,max(end(gm@range))))
    params_human[[k]] <- ScanBamParam(which=z,
                        what=c("qname"),
                        tag="CB",
                        tagFilter=list(CB=barcodes_human[[k]]))
    gals_human[[paste0("tso_",k)]] <- readGAlignments(bam[[paste0("tso_",k)]], use.names = TRUE, param=params_human[[k]])
    gals_human[[paste0("wta_",k)]] <- readGAlignments(bam[[paste0("wta_",k)]], use.names = TRUE, param=params_human[[k]])
  }

  coverage_chr_human<-list()
  covs_human<-lapply(gals_human,coverage)
  covs_human<-lapply(covs_human,function(x) as(x,"GRanges"))
  
  for (i in 1:length(covs_human)){
  covs_human[[i]]<-DataTrack(covs_human[[i]],
                            chromosome=x,
                            name=names(covs_human)[[i]])
  }
  
  for (i in names(covs_human)){
    displayPars(covs_human[[i]])<-list(fill.histogram=TRUE)
  }
  
  tso<- grep("tso",names(covs_human))
  wta<- grep("wta",names(covs_human))
  
  for (i in tso){
    displayPars(covs_human[[i]])<-list(col.histogram=myscale[["human"]],
                                           fill.histogram=myscale[["human"]],
                                           alpha.title = 1, 
                                           alpha = 1)
    covs_human[[i]]@name<-gsub("tso_","",covs_human[[i]]@name)
  }

  for (i in wta){
    displayPars(covs_human[[i]])<-list(col.histogram=myscale[["human"]],
                                           fill.histogram=myscale[["human"]],
                                           alpha.title = 1, 
                                           alpha = 0.4)
    covs_human[[i]]@name<-gsub("wta_","",covs_human[[i]]@name)
  }

  overlays_bam_human<-list()

  for (i in modality){
    overlays_bam_human[[paste0(i,"_",x)]]<-OverlayTrack(trackList=list(covs_human[[paste0("wta_",i)]],covs_human[[paste0("tso_",i)]]))
    
    displayPars(overlays_bam_human[[paste0(i,"_",x)]])<-list(background.title=myscale[[i]])
  }
  
  ranges<-c()
  for (i in names(covs_human)){
      ranges[i]<-max(range(c(values(covs_human[[i]]), 
                     values(covs_human[[i]]))))
  }

  plotTracks(c(
           overlays_bam_human,
           gms[[x]]),
           type="histogram",
           from=start(gms[[x]]@range)[1]-500,
           to=gms[[x]]@end,
           cex.axis = 0.5,
           cex.title=0.5,
           col.axis="white",
           col.title="white",
           col.border.title="white",
           showSampleNames = TRUE,
           lwd.title=0.5,
           ylim=c(0,max(ranges)))
  
    bam_coverages_human[[x]]<-covs_human
    bam_coverages_overlayed_human[[x]]<-overlays_bam_human
}

```
