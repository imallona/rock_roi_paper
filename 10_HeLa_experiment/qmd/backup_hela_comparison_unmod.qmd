---
title: "backup_09_HeLa_b_comparison_RNAScope"
format:
  html:
    toc: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Load packages, load data

```{r, warning=FALSE, message=FALSE}

rm(list=ls())

#install.packages("https://cran.r-project.org/src/contrib/Archive/Matrix/Matrix_1.6-1.tar.gz", repos = NULL, type = "source")

library(SingleCellExperiment)
library(scran)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(scater)
library(reshape2)
library(UpSetR)
library(limma)
library(cowplot)
library(pheatmap)
library(readr)
library(plotROC)
library(here)
library(Matrix)
library(scDblFinder)
library(biomaRt)
library(GenomicFeatures)
library(khroma)
library(rtracklayer)       
library(Biostrings)     
library(GenomicRanges) 
library(openxlsx)

datadir<-"/Users/gimoro/figure_making_paper/rock_roi_paper/09_hela_analysis/data/unmod_1"

sce_nd<-readRDS(paste0(datadir,"/sce_qc-filtered-nodoublets.rds"))

genes <- read.table(file.path(datadir,'wta','features.tsv'), header = FALSE)

```

### Themes

```{r}

rock_roi_theme<-function(){
  theme(axis.text = element_text(size=5), 
        plot.title=element_text(size=7,face="bold",hjust=0.5),
        axis.title=element_text(size=7,face="bold"),
        strip.text=element_text(size=7,face="bold"),
        legend.title=element_text(size=7,face="bold"),
        legend.text=element_text(size=5),
        aspect.ratio=1,
        legend.key.size = unit(0.5, 'cm'),
        legend.margin=margin(0,0,0,0),
        legend.box.margin=margin(-5,-5,-5,-5),
        legend.title.align=0.5,
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = "white"),
        plot.background = element_rect(fill = "white"),
        panel.border = element_rect(color = "black", fill = NA))
}

rock_roi_theme_multiple_panels<-function(){
    theme(axis.text = element_text(size=5), 
        plot.title=element_text(size=7,face="bold",hjust=0.5),
        axis.title=element_text(size=7,face="bold"),
        strip.text=element_text(size=7,face="bold"),
        aspect.ratio=1,
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        strip.background = element_blank(),
        legend.key.size = unit(0.5, 'cm'),
        legend.title=element_text(size=7,face="bold"),
        legend.text=element_text(size=5),
        legend.margin=margin(0,0,0,0),
        legend.box.margin=margin(-5,-5,-5,-5),
        legend.title.align=0.5,
        panel.border = element_rect(colour = "black", fill = NA))
}

```

### Defining colors to use (also adding pdgfra unimodal)

```{r}

myscale<-c(color("muted")(9), gray="darkgrey", 
             black = "black", darkorange = "darkorange",
             yellowgreen = "yellowgreen")

# defining colors for samples and for species

names(myscale) <- c("unmod","unmod_roi","rock","egfp_cds","rockroi","human","unknown","mouse","tdtom_cds","no_detection","doublets","low","pdgfra_unimodal")

plot(1:13, col=myscale, pch=19, cex=4)

```

## Reading in the Excel sheet from the Pelkmans lab

```{r}

df <- read.xlsx(paste0(datadir,"/41592_2013_BFnmeth2657_MOESM348_ESM-2.xlsx"))
df<-df[4:length(rownames(df)),]

colnames(df)<-df[1,]

df<-df[2:length(rownames(df)),]
colnames(df)

length(rownames(df))

# need to capitalize all the genes in the second column

df$Gene_Symbol<-toupper(df$Gene_Symbol) # problem --> many entries are combination of genes 

```

# Adding column with ENSEMBL ID based on Entrez ID

```{r}

mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
                         dataset = "hsapiens_gene_ensembl",
                         host = "http://www.ensembl.org")

new_rowname<-df$Entrez_ID

ensembl_id <- getBM(filters = "entrezgene_id",
               attributes = c("entrezgene_id", "ensembl_gene_id"),
               values = new_rowname, 
               mart = mart)

ensembl_id <- ensembl_id %>%
  mutate(entrezgene_id = as.character(entrezgene_id))

df_with_ensembl <- df %>%
  left_join(ensembl_id, by = c("Entrez_ID" = "entrezgene_id"))

df_with_ensembl<-as.data.frame(df_with_ensembl)

```

# Converting the sce gene names

```{r}

rownames(sce_nd)<-genes$V1

# need to remove everything before dot

rownames(sce_nd) <- rownames(sce_nd) <- sub("\\..*", "", rownames(sce_nd))

length(which(df_with_ensembl$ensembl_gene_id %in% rownames(sce_nd))) # only 920 in both

length(rownames(df_with_ensembl)) # longer than initial because duplicate rows (one entrez ID for two genes)

df_with_ensembl<-df_with_ensembl[which(df_with_ensembl$ensembl_gene_id %in% rownames(sce_nd)),] # subset table to include the genes which we have in our dataset

```

# Add information from sce_nd to table

```{r}

# table with information on genes from table

counts_sce_nd<-assay(sce_nd)[df_with_ensembl$ensembl_gene_id,]

df_with_scRNAseq<-df_with_ensembl

# total counts across all cells (not normalized)

df_with_scRNAseq$total_counts<-rowSums(counts_sce_nd)

# average counts per cell across all cells (not nromalized)

df_with_scRNAseq$counts_per_cell<-rowSums(counts_sce_nd)/length(colnames(counts_sce_nd))

# percentage of detected cells

df_with_scRNAseq$percentage_cells<-round(rowSums(counts_sce_nd > 0)/length(colnames(counts_sce_nd))*100,2)

# calculating log10 FPKM values

txdb <- makeTxDbFromGFF(paste0(datadir,"/gencode.v38.basic.annotation.gtf"), format = "gtf")

# gene length --> sum of all exons for gene

exons_by_gene <- exonsBy(txdb, by = "gene")
gene_length <- sum(width(reduce(exons_by_gene)))

names(gene_length)<-sub("\\..*", "", names(gene_length))

gene_length<-gene_length[df_with_ensembl$ensembl_gene_id]

l_sizes<-colSums(counts_sce_nd)
length(l_sizes)
fpkm <- t(t(counts_sce_nd) / l_sizes) * 1e6  # normalize to per million
fpkm <- fpkm / (gene_length / 1000)  # normalize to per kb

log10_fpkm <- log10(fpkm + 1)

df_with_scRNAseq$gene_length<-gene_length
df_with_scRNAseq$log10_fpkm<-rowSums(log10_fpkm)

```

# Cluster cells to check if they are homogenous

```{r}

sce_nd
sce_nd <- logNormCounts(sce_nd, assay.type = "counts")

mgv <- modelGeneVar(sce_nd)

mgv_pb  <- lapply(mgv$per.block, function(u) {
 o <- order(u$p.value)
 u <- u[o,]
 head(rownames(u), 1000) # use 1000 HVG
})

hvg <- mgv$bio > .01 & mgv$p.value < .01 & mgv$mean > .2
mgv[hvg,] %>% 
  as.data.frame %>% rownames -> hvg
length(hvg) # only 228 genes (which makes sense as the cells are similar to each other)

sces <- fixedPCA(sce_nd, subset.row=hvg, rank = 30) 
sces <- runUMAP(sces, dimred="PCA")

plotUMAP(sces)
plotUMAP(sces, colour_by = "total")
plotUMAP(sces, colour_by = "detected")

# checking a few hvgs 

plotUMAP(sces, colour_by = "ENSG00000248527")
plotUMAP(sces, colour_by = "ENSG00000228253")

```

# Saving file

```{r}

write.csv(df_with_scRNAseq, "~/Desktop/genes_with_scRNAseq_info.csv", row.names = FALSE)

```

## Plots

# Spots per cell vs total counts

```{r}

#ggplot(df_with_scRNAseq,aes(x=counts_per_cell,y=as.numeric(df_with_scRNAseq$"Spots/Cell_Rep1")))+
#  geom_point()

#ggplot(df_with_scRNAseq,aes(x=counts_per_cell,y=as.numeric(df_with_scRNAseq$"Spots/Cell_Rep1")))+
#  geom_point()+
#  scale_x_log10()+
#  scale_y_log10()+
  

#rownames(df_with_scRNAseq)

df_with_scRNAseq$`Spots/Cell_Rep1` <- as.numeric(df_with_scRNAseq$`Spots/Cell_Rep1`)
df_sorted <- df_with_scRNAseq[order(df_with_scRNAseq$`Spots/Cell_Rep1`), ]
df_sorted$RowOrder <- 1:nrow(df_sorted)

#ggplot(df_sorted, aes(x = RowOrder)) +
#  geom_point(aes(y = as.numeric(`Spots/Cell_Rep1`), color = "blue")) +
#  geom_point(aes(y = counts_per_cell, color = "red")) +
#  theme_minimal()+
#  scale_x_log10()+
#  scale_y_log10()


# Bin spots / cell by 5 (average between the two) and look at detection in scRNA-seq (%) --> means that expression level matters --> also look at number of genes per bin 

#df_sorted$bin_fish <- floor(df_sorted$`Spots/Cell_Rep1` / 5)
#df_sorted$bin_counts <- floor(df_sorted$counts_per_cell / 5)

#df_fish_summary <- df_sorted %>%
#  count(bin_fish) %>%
#  mutate(percentage_fish = 100 * n / sum(n)) %>%
#  rename(bin = bin_fish, percentage = percentage_fish)

#df_counts_summary <- df_sorted %>%
#  count(bin_counts) %>%
#  mutate(percentage_counts = 100 * n / sum(n)) %>%
#  rename(bin = bin_counts, percentage = percentage_counts)

#df_summary <- bind_rows(
#  df_fish_summary %>% mutate(method = "smFISH"),
#  df_counts_summary %>% mutate(method = "scRNAseq")
#)

```

# Spots per cell or counts vs gene length

```{r}

#ggplot(df_sorted, aes(x = gene_length,y=counts_per_cell)) +
#  geom_point() +
#  theme_minimal()

#ggplot(df_sorted, aes(x = gene_length,y=`Spots/Cell_Rep1`)) +
#  geom_point() +
#  theme_minimal()

```

# Similarity spots per cell rep 1 and 2 / percentage rep 1 and 2 

```{r}

#ggplot(df_sorted, aes(x = as.numeric(`Spots/Cell_Rep2`),y=as.numeric(`Spots/Cell_Rep1`))) +
#  geom_point() +
#  theme_minimal()

#ggplot(df_sorted, aes(x = as.numeric(`Fraction_Above_Background_Rep1`),y=as.numeric(`Fraction_Above_Background_Rep2`))) +
#  geom_point() +
#  theme_minimal()

```

# How percentage of positivity changes with spots per cell (if more cells means more percentage), same with counts per cell

```{r}

#ggplot(df_sorted, aes(x = as.numeric(`Spots/Cell_Rep1`),y=as.numeric(`Fraction_Above_Background_Rep1`))) +
#  geom_point() +
#  theme_minimal()

#ggplot(df_sorted, aes(x = as.numeric(`Spots/Cell_Rep2`),y=as.numeric(`Fraction_Above_Background_Rep2`))) +
#  geom_point() +
#  theme_minimal()

#ggplot(df_sorted, aes(x =counts_per_cell,y=percentage_cells)) +
#  geom_point() +
#  theme_minimal()

#ggplot(df_sorted, aes(x =counts_per_cell,y=percentage_cells)) +
#  geom_point() +
#  theme_minimal()+
#  xlim(0,100)

```

# How many counts / spots in each bin (binned by 5)

```{r}

# with sqrt

#ggplot(df_summary, aes(x = bin, y = percentage, fill = method)) +
#  geom_bar(stat = "identity", position = "dodge") +
#  xlab("Binned Value") +
#  ylab("Percentage of Spots/Counts") +
#  scale_y_sqrt()+
#  theme_bw()

# without sqrt

#ggplot(df_summary, aes(x = bin, y = percentage, fill = method)) +
#  geom_bar(stat = "identity", position = "dodge") +
#  xlab("Binned Value") +
#  ylab("Percentage of Spots/Counts")+
#  theme_bw()

```

# How many genes in each bin from FISH detected in scRNA-seq 

```{r}

#df_sorted$detected_scRNAseq<-"no"
#df_sorted$detected_scRNAseq[which(df_sorted$total_counts>0)]<-"yes"

#tabl<-as.data.frame(table(df_sorted$detected_scRNAseq,df_sorted$bin_fish))
#colnames(tabl)<-c("detected_scRNA_seq","bin_FISH","Freq_yes_no")

# needs to be in percentage

#n_genes<-as.data.frame(table(df_sorted$bin_fish))
#colnames(n_genes)<-c("bin_FISH","number_genes_in_bin")

#merged_df <- merge(n_genes, tabl, by = "bin_FISH")

#merged_df$percentage_detected<-(merged_df$Freq_yes_no/merged_df$number_genes_in_bin)*100

# here --> see number of genes but don't know what the percentage is 
#ggplot(tabl, aes(x = as.factor(bin_FISH), y = Freq_yes_no, fill = detected_scRNA_seq)) +
#  geom_bar(stat = "identity", position = "dodge") +
#  labs(x = "Bin Fish", y = "Count", title = "Bar Plot of Detected scRNAseq vs Bin Fish") +
#  theme_minimal()

#head(tabl)

# Here can compare how many are detected

#ggplot(merged_df, aes(x = as.factor(merged_df$bin_FISH), y = merged_df$percentage_detected, fill = #merged_df$detected_scRNA_seq)) +
#  geom_bar(stat = "identity", position = "dodge") +
#  labs(x = "Bin Fish", y = "Count", title = "Bar Plot of Detected scRNAseq vs Bin Fish") +
#  theme_minimal()

```

# How similar the percentages are for scRNA-seq and smFISH per gene

```{r}

#ggplot(df_sorted, aes(x = as.numeric(percentage_cells),y=as.numeric(`Fraction_Above_Background_Rep1`))) +
#  geom_point() +
#  theme_minimal()

```

# Check how many of the non-polyA are detected in the dataset

```{r}

#table(df_sorted$NonPolyA) # Have 13 transcripts with no polyA

#no_polyA_df_sorted<-df_sorted[which(df_sorted$NonPolyA==TRUE),] # all detected in scRNAseq

```

# Check how many bins higher in scRNA-seq compared to FISH

```{r}

#length(which(df_sorted$bin_fish>df_sorted$bin_counts)) # 540
#length(which(df_sorted$bin_fish<df_sorted$bin_counts)) # 9 --> only ones over are mitochondrial transcripts --> CYTB, COX3, COX1, ND2, ATP6, ND4, ND1
#length(which(df_sorted$bin_fish==df_sorted$bin_counts)) # 371

# in most cases have more in smFISH as scRNA-seq, as expected

```







# Remake all plots removing the 0 from the replicates

```{r}

df_sorted_two_replicates<-df_sorted[which(df_sorted$Number_of_Rep_Above_Background==2),]
df_with_scRNAseq_two_replicates<-df_with_scRNAseq[which(df_with_scRNAseq$Number_of_Rep_Above_Background==2),]

#ggplot(df_with_scRNAseq_two_replicates,aes(x=counts_per_cell,y=as.numeric(df_with_scRNAseq_two_replicates$"Spots/Cell_Rep1#")))+
#  geom_point()+
#  rock_roi_theme()

rownames(df_with_scRNAseq_two_replicates)<-make.unique(df_with_scRNAseq_two_replicates[,2])
highlight_rows <- c("FOXP3","RAB4B","SCN9A","ADRA1D","SOX9","KRT23","EHD3")

df_with_scRNAseq_two_replicates$label <- NA  # start with all NA
df_with_scRNAseq_two_replicates$label[rownames(df_with_scRNAseq_two_replicates) %in% highlight_rows] <- 
  rownames(df_with_scRNAseq_two_replicates)[rownames(df_with_scRNAseq_two_replicates) %in% highlight_rows]

df_with_scRNAseq_two_replicates$spot_color <- ifelse(
  rownames(df_with_scRNAseq_two_replicates) %in% highlight_rows,
  "highlight",
  "other"
)

plot1<-ggplot(df_with_scRNAseq_two_replicates,aes(x=counts_per_cell,
                                                  y=as.numeric(df_with_scRNAseq_two_replicates$"Spots/Cell_Rep1"),
                                                  color = spot_color))+
  geom_text_repel(aes(label = label), color = myscale["human"], vjust = -1,hjust=-0.2, size = 3,fontface = "bold")+
  geom_point(size=0.5)+
  scale_x_log10()+
  scale_y_log10()+
  rock_roi_theme()+
  xlab("average counts per cell")+
  ylab("average spots per cell Rep1") +
  scale_color_manual(values = c("other" = "black", "highlight" = myscale["human"]))


plot1<-ggrastr::rasterize(plot1, layers='Point', dpi=1000)

plot1

ggsave(file=file.path(datadir,"counts_vs_spots.svg"), plot=plot1, width=4, height=4)


# ggplot(df_sorted_two_replicates, aes(x = RowOrder)) +
#   geom_point(aes(y = as.numeric(`Spots/Cell_Rep1`), color = "blue")) +
#   geom_point(aes(y = counts_per_cell, color = "red")) +
#   theme_minimal()+
#   scale_x_log10()+
#   scale_y_log10()

plot2<-ggplot(df_with_scRNAseq_two_replicates, aes(x = gene_length,y=counts_per_cell)) +
  geom_point(size=0.3) +
  rock_roi_theme()

plot2<-ggrastr::rasterize(plot2, layers='Point', dpi=1000)

plot2

ggsave(file=file.path(datadir,"counts_vs_gene_length.svg"), plot=plot2, width=2.7, height=2.7)

plot3<-ggplot(df_sorted_two_replicates, aes(x = gene_length,y=`Spots/Cell_Rep1`)) +
  geom_point(size=0.3) +
  rock_roi_theme()

plot3<-ggrastr::rasterize(plot3, layers='Point', dpi=1000)

plot3

ggsave(file=file.path(datadir,"spots_vs_gene_length.svg"), plot=plot3, width=2.7, height=2.7)


#ggplot(df_sorted_two_replicates, aes(x = #as.numeric(`Fraction_Above_Background_Rep1`),y=as.numeric(`Fraction_Above_Background_Rep2`))) +
#  geom_point() +
#  theme_minimal()


plot4<-ggplot(df_with_scRNAseq_two_replicates, aes(x = as.numeric(`Spots/Cell_Rep1`),y=as.numeric(`Fraction_Above_Background_Rep1`),color = spot_color)) +
  geom_point(size=0.3) +
  geom_text_repel(aes(label = label), color = myscale["human"], vjust = 0.2,hjust=-0.5, size = 3,fontface = "bold")+
  rock_roi_theme()+
  scale_color_manual(values = c("other" = "black", "highlight" = myscale["human"]))


plot4<-ggrastr::rasterize(plot4, layers='Point', dpi=1000)

plot4

ggsave(file=file.path(datadir,"spots_per_cell_vs_fraction.svg"), plot=plot4, width=2.7, height=2.7)

plot5<-ggplot(df_with_scRNAseq_two_replicates, aes(x =counts_per_cell,y=percentage_cells,color = spot_color)) +
  geom_point(size=0.3) +
  geom_text_repel(aes(label = label), color = myscale["human"], vjust = 0.2,hjust=-0.5, size = 3,fontface = "bold")+
  rock_roi_theme()+
  scale_color_manual(values = c("other" = "black", "highlight" = myscale["human"]))


plot5<-ggrastr::rasterize(plot5, layers='Point', dpi=1000)

plot5

ggsave(file=file.path(datadir,"counts_per_cell_vs_fraction.svg"), plot=plot5, width=2.7, height=2.7)




plot6<-ggplot(df_with_scRNAseq_two_replicates, aes(x =counts_per_cell,y=percentage_cells,color = spot_color)) +
  geom_point(size=0.3) +
  geom_text_repel(aes(label = label), color = myscale["human"], vjust = -3,hjust=-1, size = 3,fontface = "bold")+
  rock_roi_theme()+
  xlim(0,1)+
  ylim(0,1)+
  scale_color_manual(values = c("other" = "black", "highlight" = myscale["human"]))


plot6<-ggrastr::rasterize(plot6, layers='Point', dpi=1000)

plot6

ggsave(file=file.path(datadir,"zoom_counts_per_cell_vs_fraction.svg"), plot=plot6, width=2.7, height=2.7)


df_fish_summary_two_replicates <- df_sorted_two_replicates %>%
  count(bin_fish) %>%
  mutate(percentage_fish = 100 * n / sum(n)) %>%
  rename(bin = bin_fish, percentage = percentage_fish)

df_counts_summary_two_replicates <- df_sorted_two_replicates %>%
  count(bin_counts) %>%
  mutate(percentage_counts = 100 * n / sum(n)) %>%
  rename(bin = bin_counts, percentage = percentage_counts)

df_summary_two_replicates <- bind_rows(
  df_fish_summary_two_replicates %>% mutate(method = "smFISH"),
  df_counts_summary_two_replicates %>% mutate(method = "scRNAseq")
)

# with sqrt

ggplot(df_summary_two_replicates, aes(x = bin, y = percentage, fill = method)) +
  geom_bar(stat = "identity", position = "dodge") +
  xlab("Binned Value") +
  ylab("Percentage of Spots/Counts") +
  scale_y_sqrt()+
  theme_bw()

# without sqrt

ggplot(df_summary_two_replicates, aes(x = bin, y = percentage, fill = method)) +
  geom_bar(stat = "identity", position = "dodge") +
  xlab("Binned Value") +
  ylab("Percentage of Spots/Counts")+
  theme_bw()


df_sorted_two_replicates$detected_scRNAseq<-"no"
df_sorted_two_replicates$detected_scRNAseq[which(df_sorted_two_replicates$total_counts>0)]<-"yes"

tabl<-as.data.frame(table(df_sorted_two_replicates$detected_scRNAseq,df_sorted_two_replicates$bin_fish))
colnames(tabl)<-c("detected_scRNA_seq","bin_FISH","Freq_yes_no")

# needs to be in percentage

n_genes<-as.data.frame(table(df_sorted_two_replicates$bin_fish))
colnames(n_genes)<-c("bin_FISH","number_genes_in_bin")

merged_df <- merge(n_genes, tabl, by = "bin_FISH")

merged_df$percentage_detected<-(merged_df$Freq_yes_no/merged_df$number_genes_in_bin)*100

# here --> see number of genes but don't know what the percentage is 
ggplot(tabl, aes(x = as.factor(bin_FISH), y = Freq_yes_no, fill = detected_scRNA_seq)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Bin Fish", y = "Count", title = "Bar Plot of Detected scRNAseq vs Bin Fish") +
  theme_minimal()

head(tabl)

# Here can compare how many are detected

ggplot(merged_df, aes(x = as.factor(merged_df$bin_FISH), y = merged_df$percentage_detected, fill = merged_df$detected_scRNA_seq)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Bin Fish", y = "Count", title = "Bar Plot of Detected scRNAseq vs Bin Fish") +
  theme_minimal()

ggplot(df_sorted_two_replicates, aes(x = as.numeric(percentage_cells),y=as.numeric(`Fraction_Above_Background_Rep1`))) +
  geom_point() +
  theme_minimal()

table(df_sorted_two_replicates$NonPolyA) # Have 13 transcripts with no polyA

no_polyA_df_sorted<-df_sorted_two_replicates[which(df_sorted_two_replicates$NonPolyA==TRUE),] # all detected in scRNAseq

length(which(df_sorted_two_replicates$bin_fish>df_sorted_two_replicates$bin_counts)) # 540
length(which(df_sorted_two_replicates$bin_fish<df_sorted_two_replicates$bin_counts)) # 9 --> only ones over are mitochondrial transcripts --> CYTB, COX3, COX1, ND2, ATP6, ND4, ND1
length(which(df_sorted_two_replicates$bin_fish==df_sorted_two_replicates$bin_counts)) # 371

# in most cases have more in smFISH as scRNA-seq, as expected

```

