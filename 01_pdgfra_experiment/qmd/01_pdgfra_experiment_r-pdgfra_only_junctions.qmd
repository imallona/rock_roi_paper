---
title: "01_pdgfra_experiment_r-pdgfra_only_junctions"
format:
  html:
    toc: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r,warning=FALSE, message=FALSE}

rm(list=ls())

library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(pheatmap)
library(here)
library(tibble)
library(khroma)
library(googlesheets4)
library(tidyr)
library(reshape2)
library(readr)
library(Matrix)
library(rtracklayer)
library(Gviz)

save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
   stopifnot(!missing(x))
   stopifnot(!missing(filename))
   pdf(filename, width=width, height=height)
   grid::grid.newpage()
   grid::grid.draw(x$gtable)
   dev.off()
}

datadir <- file.path(here("01_pdgfra_experiment"), "data")

# read filtered-clustered object to SCE
sce <- readRDS(file.path(datadir,
                         "sce_qc-filtered-nodoublets-clustered-annotated.rds"))

myscale <- c(color("muted")(9), gray="lightgray", 
             black = "black", darkorange = "darkorange",
             yellowgreen = "yellowgreen")
names(myscale) <- as.character(1:13)

#plot(1:13, col=myscale, pch=19, cex=4)

inds <- split(seq_len(ncol(sce)), sce$annotation)
names(myscale) <- levels(factor(sce$annotation))
ann_colors = list(annotation = myscale[seq_len(length(inds))])

uct <- unique(sce$annotation)
names(uct) <- uct
uct[grepl("Crypt_bottom", uct)] <- "Crypt_bottom"
uct[!grepl("Crypt", uct)] <- "Epithelial"

sce$celltype <- uct[sce$annotation] 

# write files of barcodes -- to be used with `samtools`

ss <- strsplit(rownames(colData(sce)), ".", fixed=TRUE)

df <- data.frame(sample_celltype = paste0(sce$sample_id, "__",
                                          sce$celltype),
                 barcode = sapply(ss, .subset2, 2))

dfs <- split(df[,-1,drop=FALSE], df$sample_celltype)
for(i in 1:length(dfs)) {
  fo <- file.path(datadir, paste0(names(dfs)[i],".barcode"))
  writeLines(dfs[[i]]$barcode, con = fo)
}

dir(datadir, ".barcode$")

# writing for Pdgfra positive cells to subset .bam files for junction counting 

```

## TSO

```{r}

# Pdgfra only cells 

wta<-assay(sce,"wta")
tso<-assay(sce,"tso_off_and_ontarget_unique")

barcodes_wta<-names(which(wta[grep("Pdgfra",rownames(wta)),]>0))
barcodes_tso<-names(which(tso[grep("Pdgfra",rownames(tso)),]>0))

length(colnames(wta))
length(barcodes_wta)
length(barcodes_tso)

pdgfra_barcodes<-unique(c(barcodes_wta,barcodes_tso))

length(pdgfra_barcodes)

juncfs <- list.files(file.path(datadir, "featurecounts_tso"),
                     ".featurecounts.jcounts$", recursive = TRUE,
                     full.names = TRUE)

barcode <- sapply(basename(juncfs) %>% strsplit("CB_"),
                  function(u) gsub(".bam.featurecounts.jcounts","", u[2]))

samp <- sapply(juncfs %>% dirname %>% basename %>% strsplit("___"),
       .subset, 1)

samp<-gsub("tso_","",samp)
samp<-gsub("tso_","",samp)

key <- paste0(samp, ".", barcode)

length(setdiff(pdgfra_barcodes, key))
length(setdiff(key, pdgfra_barcodes))

# only keep junction counts for barcodes we still have
keep <- key %in% pdgfra_barcodes
juncfs <- juncfs[keep]
key <- key[keep]

length(key)

# manually construct sparse matrix
col_num <- match(key, sce$sample_id.barcode)

fi <- file.info(juncfs)

read_junc_file <- function(f) {
  read_delim(f, delim = "\t", skip = 1,
                       col_types = "ccciccici", 
                       col_names = c("PrimaryGene","SecondaryGenes",
                                     "Site1_chr","Site1_location","Site1_strand",
                                     "Site2_chr","Site2_location","Site2_strand",
                                     "count")) %>% 
    mutate(region = paste0(ifelse(is.na(PrimaryGene),"",
                                  paste0("[",PrimaryGene,"] ")),
                           Site1_chr,":",Site1_location,"-",Site2_location)) %>%
    dplyr::select(region,count)
    
}

(feat_tab <- read_junc_file(juncfs[which.max(fi$size)]))

system.time(
cnts_tab <- lapply(juncfs %>% setNames(key),
                   read_junc_file) 
) 

length(cnts_tab)

cnts_df <- data.frame(barcode = rep(names(cnts_tab), 
                                    sapply(cnts_tab, nrow)),
                      bind_rows(cnts_tab))

length(cnts_df$barcode)

# make into table                    
tab <- dcast(cnts_df, region ~ barcode, 
             value.var = "count") %>% as_tibble %>%
  column_to_rownames("region") %>% as.matrix
tab[is.na(tab)] <- 0

cnts_df %>% group_by(region) %>% 
  tally(wt = count) %>% 
  arrange(desc(n)) %>% print(n=20)

m <- match(colnames(tab), sce$sample_id.barcode)
w <- tab > 0
rows <- row(tab)[w]
cols <- m[col(tab)[w]]

length(m)
length(cols)

cnts_sparse <- sparseMatrix(rows, cols, x=tab[w],
                            dims = c(nrow(tab), ncol(sce)) )

rd <- DataFrame(region = rownames(tab))
ss <- strsplit(rd$region, ":", fixed = TRUE)
ss2 <- sapply(ss, function(u) strsplit(u[2], "-", fixed = TRUE))

rd$start <- sapply(ss2, .subset2, 1)
rd$end <- sapply(ss2, .subset2, 2)
rd$region_name <- sapply(ss, .subset2, 1)

length(rd$region_name)

se <- SummarizedExperiment(assays = list(tso_junction = cnts_sparse),
                           rowData = rd,colData = colData(sce))

```

## Reorganize data into long format

```{r}

b <- apply(cnts_sparse, 1, function(u) {
  table(u>0, sce$celltype, sce$sample_id) %>% 
    as.data.frame %>%
    setNames(c("expressed","celltype","sample","freq")) %>%
    group_by(celltype, sample) %>%
    summarise(perc_expressed = 100*weighted.mean(expressed==TRUE, freq)) %>%
    ungroup
  }, simplify = FALSE) %>%
  setNames(rownames(tab)) 

for(i in 1:length(b)) b[[i]]$region <- names(b)[i]

b <- b %>% bind_rows %>% left_join(rd %>% as.data.frame)

```

## Save R objects to disk

```{r}

#saveRDS(b, file = file.path(datadir, "junctions", "pdgfra_only_tso_df-annotated-junctions.rds"))
#saveRDS(se, file = file.path(datadir, "junctions", "pdgfra_only_tso_se-annotated-junctions.rds"))

one<-readRDS(file = file.path(datadir, "junctions", "pdgfra_only_tso_df-annotated-junctions.rds"))
two<-readRDS(file = file.path(datadir, "junctions", "tso_df-annotated-junctions.rds"))


table(one$perc_expressed)
table(two$perc_expressed)

```













### WTA

## Same for pdgfra only cells

```{r}

# Pdgfra only cells 

wta<-assay(sce,"wta")
tso<-assay(sce,"tso_off_and_ontarget_unique")

barcodes_wta<-names(which(wta[grep("Pdgfra",rownames(wta)),]>0))
barcodes_tso<-names(which(tso[grep("Pdgfra",rownames(tso)),]>0))

pdgfra_barcodes<-unique(c(barcodes_wta,barcodes_tso))

juncfs <- list.files(file.path(datadir, "featurecounts_wta"),
                     ".featurecounts.jcounts$", recursive = TRUE,
                     full.names = TRUE)

barcode <- sapply(basename(juncfs) %>% strsplit("CB_"),
                  function(u) gsub(".bam.featurecounts.jcounts","", u[2]))

samp <- sapply(juncfs %>% dirname %>% basename %>% strsplit("___"),
       .subset, 1)

samp<-gsub("wta_","",samp)
samp<-gsub("wta_","",samp)

key <- paste0(samp, ".", barcode)
head(key)

length(setdiff(pdgfra_barcodes, key))
length(setdiff(key, pdgfra_barcodes))

# only keep junction counts for barcodes we still have
keep <- key %in% pdgfra_barcodes
juncfs <- juncfs[keep]
key <- key[keep]

# manually construct sparse matrix
col_num <- match(key, sce$sample_id.barcode)

fi <- file.info(juncfs)

read_junc_file <- function(f) {
  read_delim(f, delim = "\t", skip = 1,
                       col_types = "ccciccici", 
                       col_names = c("PrimaryGene","SecondaryGenes",
                                     "Site1_chr","Site1_location","Site1_strand",
                                     "Site2_chr","Site2_location","Site2_strand",
                                     "count")) %>% 
    mutate(region = paste0(ifelse(is.na(PrimaryGene),"",
                                  paste0("[",PrimaryGene,"] ")),
                           Site1_chr,":",Site1_location,"-",Site2_location)) %>%
    dplyr::select(region,count)
    
}

(feat_tab <- read_junc_file(juncfs[which.max(fi$size)]))

system.time(
cnts_tab <- lapply(juncfs %>% setNames(key),
                   read_junc_file) 
) 

cnts_df <- data.frame(barcode = rep(names(cnts_tab), 
                                    sapply(cnts_tab, nrow)),
                      bind_rows(cnts_tab))

# make into table                    
tab <- dcast(cnts_df, region ~ barcode, 
             value.var = "count") %>% as_tibble %>%
  column_to_rownames("region") %>% as.matrix
tab[is.na(tab)] <- 0

cnts_df %>% group_by(region) %>% 
  tally(wt = count) %>% 
  arrange(desc(n)) %>% print(n=20)

m <- match(colnames(tab), sce$sample_id.barcode)
w <- tab > 0
rows <- row(tab)[w]
cols <- m[col(tab)[w]]

cnts_sparse <- sparseMatrix(rows, cols, x=tab[w],
                            dims = c(nrow(tab), ncol(sce)) )

rd <- DataFrame(region = rownames(tab))
ss <- strsplit(rd$region, ":", fixed = TRUE)
ss2 <- sapply(ss, function(u) strsplit(u[2], "-", fixed = TRUE))

rd$start <- sapply(ss2, .subset2, 1)
rd$end <- sapply(ss2, .subset2, 2)
rd$region_name <- sapply(ss, .subset2, 1)

se <- SummarizedExperiment(assays = list(tso_junction = cnts_sparse),
                           rowData = rd,colData = colData(sce))

```

## Reorganize data into long format

```{r}

b <- apply(cnts_sparse, 1, function(u) {
  table(u>0, sce$celltype, sce$sample_id) %>% 
    as.data.frame %>%
    setNames(c("expressed","celltype","sample","freq")) %>%
    group_by(celltype, sample) %>%
    summarise(perc_expressed = 100*weighted.mean(expressed==TRUE, freq)) %>%
    ungroup
  }, simplify = FALSE) %>%
  setNames(rownames(tab)) 

for(i in 1:length(b)) b[[i]]$region <- names(b)[i]

b <- b %>% bind_rows %>% left_join(rd %>% as.data.frame)

```

## Save R objects to disk

```{r}

#saveRDS(b, file = file.path(datadir, "junctions", "pdgfra_only_wta_df-annotated-junctions.rds"))
#saveRDS(se, file = file.path(datadir, "junctions", "pdgfra_only_wta_se-annotated-junctions.rds"))

```


### Session info

```{r}

sessionInfo()

```


