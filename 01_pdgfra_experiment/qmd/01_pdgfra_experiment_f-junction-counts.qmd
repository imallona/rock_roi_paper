---
title: "01_pdgfra_experiment_f-junction-counts"
format:
  html:
    toc: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---


```{r,warning=FALSE, message=FALSE}

rm(list=ls())

library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(pheatmap)
library(here)
library(tibble)
library(khroma)
library(googlesheets4)
library(tidyr)
library(reshape2)
library(readr)
library(Matrix)
library(rtracklayer)
library(Gviz)

save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
   stopifnot(!missing(x))
   stopifnot(!missing(filename))
   pdf(filename, width=width, height=height)
   grid::grid.newpage()
   grid::grid.draw(x$gtable)
   dev.off()
}

datadir <- file.path(here("01_pdgfra_experiment"), "data")

# read filtered-clustered object to SCE
sce <- readRDS(file.path(datadir,
                         "sce_qc-filtered-nodoublets-clustered-annotated.rds"))

myscale <- c(color("muted")(9), gray="lightgray", 
             black = "black", darkorange = "darkorange",
             yellowgreen = "yellowgreen")
names(myscale) <- as.character(1:13)

#plot(1:13, col=myscale, pch=19, cex=4)

inds <- split(seq_len(ncol(sce)), sce$annotation)
names(myscale) <- levels(factor(sce$annotation))
ann_colors = list(annotation = myscale[seq_len(length(inds))])

uct <- unique(sce$annotation)
names(uct) <- uct
uct[grepl("Crypt_bottom", uct)] <- "Crypt_bottom"
uct[!grepl("Crypt", uct)] <- "Epithelial"

sce$celltype <- uct[sce$annotation] 

# write files of barcodes -- to be used with `samtools`

ss <- strsplit(rownames(colData(sce)), ".", fixed=TRUE)

df <- data.frame(sample_celltype = paste0(sce$sample_id, "__",
                                          sce$celltype),
                 barcode = sapply(ss, .subset2, 2))

dfs <- split(df[,-1,drop=FALSE], df$sample_celltype)
for(i in 1:length(dfs)) {
  fo <- file.path(datadir, paste0(names(dfs)[i],".barcode"))
  writeLines(dfs[[i]]$barcode, con = fo)
}

dir(datadir, ".barcode$")

```

## Read in read counts to sparse matrix

```{r}

juncfs <- list.files(file.path(datadir, "junctions"),
                     ".featurecounts$", recursive = TRUE,
                     full.names = TRUE)

barcode <- sapply(basename(juncfs) %>% strsplit("CB_"),
                  function(u) gsub(".bam.featurecounts","", u[2]))

samp <- sapply(juncfs %>% dirname %>% basename %>% strsplit("___"),
       .subset, 1)

key <- paste0(samp, ".", barcode)

length(setdiff(sce$sample_id.barcode, key))
length(setdiff(key, sce$sample_id.barcode))

# only keep junction counts for barcodes we still have
keep <- key %in% sce$sample_id.barcode
juncfs <- juncfs[keep]
key <- key[keep]

# manually construct sparse matrix
col_num <- match(key, sce$sample_id.barcode)

feat_tab <- read_delim(juncfs[1], delim = "\t", skip = 1,
                       col_types = "ccddcdd") %>% 
  as.data.frame %>% select(Geneid,Chr,Start,End,Strand,Length)

system.time(
cnts_tab <- sapply(juncfs %>% setNames(key), 
                   function(u) {
  rd <- read_delim(u, delim = "\t", skip = 1,
                   col_types = "ccddcdd")
  rd[,ncol(rd), drop = TRUE]
})
)

w <- cnts_tab > 0
rows <- row(cnts_tab)[w]
cols <- col_num[col(cnts_tab)[w]]

cnts_sparse <- sparseMatrix(rows, cols, x=cnts_tab[w],
                            dims = c(nrow(feat_tab), ncol(sce)) )

this_aE <- SummarizedExperiment(assays = list(tso_junction = cnts_sparse),
                                rowData = feat_tab,
                                colData = colData(sce))
  



b <- apply(cnts_sparse, 1, function(u) {
  table(u>0, sce$celltype, sce$sample_id) %>% 
    as.data.frame %>%
    setNames(c("expressed","celltype","sample","freq")) %>%
    group_by(celltype, sample) %>%
    summarise(perc_expressed = 100*weighted.mean(expressed==TRUE, freq)) %>%
    ungroup
  }, simplify = FALSE) %>%
  setNames(with(feat_tab, paste0(Geneid,"__",Chr,":",Start,"-",End))) 

for(i in 1:length(b)) b[[i]]$region <- names(b)[i]

b <- b %>% bind_rows

ss <- strsplit(b$region, "__")
b$location <- sapply(ss, .subset, 2)
b$roi <- sapply(ss, .subset, 1)

```

### Plots of reads detected

```{r}

(aa <- ggplot(b %>% filter(grepl("__egfp", region)),
                    aes(x = celltype, y = perc_expressed, fill = sample,
                        colour = sample, group = sample,
                        label = perc_expressed)) +
  geom_bar(position = position_dodge2(), stat = "identity") +
  geom_text(aes(label = round(perc_expressed, 1), 
                y = perc_expressed+1.5), colour = "black",
            position = position_dodge2(width = 1)) +
  facet_wrap(~location, nrow = 1) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust=1)) +
  ylab("Percent cells expressed"))

(bb <- ggplot(b %>% filter(grepl("roi_[456]", region)),
                    aes(x = celltype, y = perc_expressed, fill = sample,
                        colour = sample, group = sample,
                        label = perc_expressed)) +
  geom_bar(position = position_dodge2(), stat = "identity") +
  geom_text(aes(label = round(perc_expressed, 1), 
                y = perc_expressed+1.5), colour = "black",
            position = position_dodge2(width = 1)) +
  facet_wrap(~location, nrow = 1) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust=1)) +
  ylab("Percent cells expressed"))

b %>% filter(grepl("roi_[456]", region), 
             celltype=="Epithelial", sample=="rockroi")

(cc <- ggplot(b %>% filter(grepl("roi_1[3456]", region)),
                    aes(x = celltype, y = perc_expressed, fill = sample,
                        colour = sample, group = sample,
                        label = perc_expressed)) +
  geom_bar(position = position_dodge2(), stat = "identity") +
  geom_text(aes(label = round(perc_expressed, 1), 
                y = perc_expressed+1.5), colour = "black",
            position = position_dodge2(width = 1)) +
  facet_wrap(~location, nrow = 1) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust=1)) +
  ylab("Percent cells expressed"))

library(cowplot)
plot_grid(aa,bb,cc, ncol = 1)

# bd <- dcast(b, region ~ celltype__sample, 
#             mean, margins = FALSE)

# ss <- strsplit(bd$region, "__", fixed = TRUE)
# ss2 <- lapply(ss, function(u) {
#   v <- strsplit(u[2], ":")[[1]]
#   sten <- sapply(v, function(z) {
#   })
#   x <- strsplit(v[2], "-")[[1]]
#   data.frame(chromosome=v[1], start=x[1], end=x[2])
# }) %>% bind_rows
# 
# nrow(ss2)==nrow(bd)
# bd <- cbind(region = sapply(ss, .subset, 2), ss2, 
#             bd %>% select(-region))

# 
# 
# bd %>% filter(chromosome=="egfp")

a <- apply(cnts_sparse, 1, function(u)
  table(u>0, sce$celltype, sce$sample_id) %>%
    as.data.frame %>%
    setNames(c("expressed","celltype","sample","freq")) %>%
    melt,
  simplify = FALSE) %>%
  setNames(with(feat_tab, paste0(Geneid,"__",Chr,":",Start,"-",End)))
for(i in 1:length(a)) a[[i]]$region <- names(a)[i]

a <- a %>% bind_rows

ss <- strsplit(a$region, "__")
a$location <- sapply(ss, .subset, 2)
a$roi <- sapply(ss, .subset, 1)

ggplot(a %>% filter(grepl("roi_[456]", region)),
       aes(x = celltype,fill = expressed,
           by = celltype, weight=value)) +
  geom_bar(position ="stack") +
  facet_grid(sample~location, ) +
  scale_y_sqrt() +
  theme(axis.text.x = element_text(angle = 30, size = 8,
                                   vjust = 1, hjust=1))

juncfs <- list.files(file.path(datadir, "junctions"),
                     "featurecounts.jcounts$", recursive = TRUE,
                     full.names = TRUE)

barcode <- sapply(basename(juncfs) %>% strsplit("CB_"),
                  function(u) gsub(".bam.featurecounts.jcounts","", u[2]))

samp <- sapply(juncfs %>% dirname %>% basename %>% strsplit("___"),
       .subset, 1)

key <- paste0(samp, ".", barcode)
head(key)

length(setdiff(sce$sample_id.barcode, key))
length(setdiff(key, sce$sample_id.barcode))

# only keep junction counts for barcodes we still have
keep <- key %in% sce$sample_id.barcode
juncfs <- juncfs[keep]
key <- key[keep]

# manually construct sparse matrix
col_num <- match(key, sce$sample_id.barcode)

fi <- file.info(juncfs)

read_junc_file <- function(f) {
  read_delim(f, delim = "\t", skip = 1,
                       col_types = "ccciccici", 
                       col_names = c("PrimaryGene","SecondaryGenes",
                                     "Site1_chr","Site1_location","Site1_strand",
                                     "Site2_chr","Site2_location","Site2_strand",
                                     "count")) %>% 
    mutate(region = paste0(ifelse(is.na(PrimaryGene),"",
                                  paste0("[",PrimaryGene,"] ")),
                           Site1_chr,":",Site1_location,"-",Site2_location)) %>%
    select(region,count)
    
}

(feat_tab <- read_junc_file(juncfs[which.max(fi$size)]))

system.time(
cnts_tab <- lapply(juncfs %>% setNames(key),
                   read_junc_file) 
) 

cnts_df <- data.frame(barcode = rep(names(cnts_tab), 
                                    sapply(cnts_tab, nrow)),
                      bind_rows(cnts_tab))

# make into table                    
tab <- dcast(cnts_df, region ~ barcode, 
             value.var = "count") %>% as_tibble %>%
  column_to_rownames("region") %>% as.matrix
tab[is.na(tab)] <- 0


cnts_df %>% group_by(region) %>% 
  tally(wt = count) %>% 
  arrange(desc(n)) %>% print(n=20)

m <- match(colnames(tab), sce$sample_id.barcode)
w <- tab > 0
rows <- row(tab)[w]
cols <- m[col(tab)[w]]

cnts_sparse <- sparseMatrix(rows, cols, x=tab[w],
                            dims = c(nrow(tab), ncol(sce)) )


b <- apply(cnts_sparse, 1, function(u) {
  table(u>0, sce$celltype, sce$sample_id) %>% 
    as.data.frame %>%
    setNames(c("expressed","celltype","sample","freq")) %>%
    group_by(celltype, sample) %>%
    summarise(perc_expressed = 100*weighted.mean(expressed==TRUE, freq)) %>%
    ungroup
  }, simplify = FALSE) %>%
  setNames(rownames(tab)) 

for(i in 1:length(b)) b[[i]]$region <- names(b)[i]

b <- b %>% bind_rows

```

### Plots of junction reads

```{r}

ss <- strsplit(b$region, ":", fixed = TRUE)
ss2 <- sapply(ss, function(u) strsplit(u[2], "-", fixed = TRUE))

b$start <- sapply(ss2, .subset2, 1)
b$end <- sapply(ss2, .subset2, 2)
b$region_name <- sapply(ss, .subset2, 1)


(
  
  bb <- ggplot(b %>% filter(grepl("roi_[3456]", region_name)),
                    aes(x = celltype, y = perc_expressed, fill = sample,
                        colour = sample, group = sample,
                        label = perc_expressed)) +
  geom_bar(position = position_dodge2(), stat = "identity") +
  geom_text(aes(label = round(perc_expressed, 1), 
                y = perc_expressed+1.5), colour = "black",
            position = position_dodge2(width = 1)) +
  facet_wrap(~region, nrow = 1) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust=1)) +
  ylab("Percent cells expressed")
  
  )

```

### Plots of sashimis by cell type

```{r}

options(ucscChromosomeNames=FALSE)

anno <- import(file.path(datadir, "subset.gtf")) %>% 
  as.data.frame %>% filter(type=="exon")
colnames(anno)[1] <- "chromosome"

axisTrack <- GenomeAxisTrack()

grt <- GeneRegionTrack(anno, genome = "hg19",
                       chromosome = "chr5",
                       name = "Pdgfra", size = 2)

# > list.files("01_pdgfra_experiment/data", ".bam$")
# [1] "rockroi__Crypt_bottom.bam" "rockroi__Crypt_top.bam"   
# [3] "rockroi__Epithelial.bam"   "unmod__Crypt_bottom.bam"  
# [5] "unmod__Crypt_top.bam"      "unmod__Epithelial.bam" 


# didn't see a more elegant way
rr_cryptb <- AlignmentsTrack(file.path(datadir, "rockroi__Crypt_bottom.bam"),
                             ylim = c(0,2000), name = "ROCKROI Crypt_bottom",
                             isPaired = FALSE)
displayPars(rr_cryptb) <- list("col"=ann_colors$annotation[["Crypt_bottom_2"]])

rr_cryptt <- AlignmentsTrack(file.path(datadir, "rockroi__Crypt_top.bam"),
                             ylim = c(0,400), name = "ROCKROI Crypt_top",
                             isPaired = FALSE)
displayPars(rr_cryptt) <- list("col"=ann_colors$annotation[["Crypt_top"]])

rr_epi <- AlignmentsTrack(file.path(datadir, "rockroi__Epithelial.bam"),
                             ylim = c(0,100), name = "ROCKROI Epithelial",
                             isPaired = FALSE)
displayPars(rr_epi) <- list("col"=ann_colors$annotation[["Stem/TA"]])

um_cryptb <- AlignmentsTrack(file.path(datadir, "unmod__Crypt_bottom.bam"),
                             ylim = c(0,20), name = "ROCKROI Crypt_bottom",
                             isPaired = FALSE)
displayPars(um_cryptb) <- list("col"=ann_colors$annotation[["Crypt_bottom_2"]])

um_cryptt <- AlignmentsTrack(file.path(datadir, "unmod__Crypt_top.bam"),
                             ylim = c(0,20), name = "ROCKROI Crypt_top",
                             isPaired = FALSE)
displayPars(um_cryptt) <- list("col"=ann_colors$annotation[["Crypt_top"]])

um_epi <- AlignmentsTrack(file.path(datadir, "unmod__Epithelial.bam"),
                             ylim = c(0,20), name = "ROCKROI Epithelial",
                             isPaired = FALSE)
displayPars(um_epi) <- list("col"=ann_colors$annotation[["Stem/TA"]])


b %>% filter(grepl("__egfp", region)) %>% pull("location") -> regs
regs <- gsub("egfp:","", regs)
rng <- range(as.numeric(unlist(strsplit(regs,"-"))))

plotTracks(c(axisTrack,
             rr_cryptb, um_cryptb,
             rr_cryptt, um_cryptt,
             rr_epi, um_epi
             ),
           from = rng[1], to = rng[2],
           chromosome = "egfp",
           main = "Pdgfra",
           type = c("coverage", "sashimi"), sashimiNumbers=TRUE, 
           col.axis="black",
           fontcolor.title="black")

b %>% filter(grepl("roi_[456]", region)) %>% pull("location") -> regs
regs <- gsub("chr5:","", regs)
rng <- range(as.numeric(unlist(strsplit(regs,"-"))))


pdf("plot.pdf", height=6, width=12)
plotTracks(c(axisTrack, grt,
             rr_cryptb, um_cryptb,
             rr_cryptt, um_cryptt,
             rr_epi, um_epi
             ),
           from = rng[1], to = rng[2],
           chromosome = "chr5",
           main = "Pdgfra",
           type = c("coverage", "sashimi"), sashimiNumbers=TRUE, 
           col.axis="black",
           fontcolor.title="black")
dev.off()

```

### Session info

```{r}

sessionInfo()

```


