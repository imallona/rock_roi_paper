---
title: "Bringing the manual annotations into the objects"
format:
  html:
    toc: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Load packages, load data

```{r, warning=FALSE, message=FALSE}
library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(pheatmap)
library(here)
library(tibble)
library(khroma)
library(googlesheets4)
library(tidyr)
library(reshape2)
library(readr)

save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
   stopifnot(!missing(x))
   stopifnot(!missing(filename))
   pdf(filename, width=width, height=height)
   grid::grid.newpage()
   grid::grid.draw(x$gtable)
   dev.off()
}

datadir <- file.path(here("01_pdgfra_experiment"), "data")

# read filtered-clustered object to SCE
sce <- readRDS(file.path(datadir,
                         "sce_qc-filtered-nodoublets-clustered-annotated.rds"))

myscale <- c(color("muted")(9), gray="lightgray", 
             black = "black", darkorange = "darkorange",
             yellowgreen = "yellowgreen")
names(myscale) <- as.character(1:13)

plot(1:13, col=myscale, pch=19, cex=4)

```


## Read in junction counts


```{r}

juncfs <- list.files(file.path(datadir, "junctions"),
                     ".featurecounts$", recursive = TRUE,
                     full.names = TRUE)

barcode <- sapply(basename(juncfs) %>% strsplit("CB_"),
                  function(u) gsub(".bam.featurecounts","", u[2]))

samp <- sapply(juncfs %>% dirname %>% basename %>% strsplit("___"),
       .subset, 1)

key <- paste0(samp, ".", barcode)

length(setdiff(sce$sample_id.barcode, key))
length(setdiff(key, sce$sample_id.barcode))

# only keep junction counts for barcodes we still have
keep <- key %in% sce$sample_id.barcode
juncfs <- juncfs[keep]
key <- key[keep]


# manually construct sparse matrix

col_num <- match(key, sce$sample_id.barcode)

feat_tab <- read_delim(juncfs[1], delim = "\t", skip = 1,
                       col_types = "ccddcdd") %>% 
  as.data.frame %>% select(Geneid,Chr,Start,End,Strand,Length)

system.time(
cnts_tab <- sapply(juncfs %>% setNames(key), 
                   function(u) {
  rd <- read_delim(u, delim = "\t", skip = 1,
                   col_types = "ccddcdd")
  rd[,ncol(rd), drop = TRUE]
})
)

w <- cnts_tab > 0
rows <- row(cnts_tab)[w]
cols <- col_num[col(cnts_tab)[w]]

cnts_sparse <- sparseMatrix(rows, cols, x=cnts_tab[w],
                            dims = c(nrow(feat_tab), ncol(sce)) )

this_aE <- SummarizedExperiment(assays = list(tso_junction = cnts_sparse),
                                rowData = feat_tab,
                                colData = colData(sce))
  


# for(i in 1:nrow(cnts_sparse)) {
#   print(feat_tab[i,])
#   print(table(cnts_sparse[i,]>0, sce$annotation, sce$sample_id))
#   cat("\n")
# }


a <- apply(cnts_sparse, 1, function(u) 
  table(u>0, sce$annotation, sce$sample_id) %>% 
    as.data.frame %>%
    setNames(c("expressed","celltype","sample","freq")) %>%
    melt, 
  simplify = FALSE) %>% 
  setNames(with(feat_tab, paste0(Geneid,"__",Chr,":",Start,"-",End))) 

for(i in 1:length(a)) a[[i]]$region <- names(a)[i]

a <- a %>% bind_rows



ggplot(a %>% filter(grepl("egfp",region)),
       aes(x = celltype,fill = expressed,
           by = celltype, weight=value)) + 
  geom_bar(position ="fill") +
  facet_grid(sample~region, ) +
  theme(axis.text.x = element_text(angle = 45, 
                                   vjust = 1, hjust=1))


# for(i in 1:nrow(cnts_sparse)) {
#   print(feat_tab[i,])
#   print(table(cnts_sparse[i,]>0, sce$annotation, sce$sample_id))
#   cat("\n")
# }


ggplot(m,aes(x = Var1,fill = Var2, weight=value, by=Var1)) + 
  geom_bar(position = "fill")

```



# Save output

```{r}
# save clustered object to RDS
saveRDS(sce, file.path(datadir, "sce_qc-filtered-nodoublets-clustered-.rds"))
```


## `sessionInfo()`

```{r}
sessionInfo()
```

