---
title: "Dim. Reduction / Clustering of 01_pdgfra_experiment"
format:
  html:
    toc: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Load packages, load data

```{r, warning=FALSE, message=FALSE}

rm(list=ls())

library(SingleCellExperiment)
library(scDblFinder)
library(scran)
library(scater)
library(ggplot2)
library(dplyr)
library(tidyr)
library(reshape2)
library(UpSetR)
library(limma)
library(cowplot)
library(pheatmap)
library(readr)
library(plotROC)
library(here)
library(khroma)
library(bluster)
library(googlesheets4)
library(gridExtra)


save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
   stopifnot(!missing(x))
   stopifnot(!missing(filename))
   pdf(filename, width=width, height=height)
   grid::grid.newpage()
   grid::grid.draw(x$gtable)
   dev.off()
}

datadir <- file.path(here("01_pdgfra_experiment"), "data")

# save filtered to RDS
sces <- readRDS(file.path(datadir, "sce_qc-filtered.rds"))

markers <- read_sheet("https://docs.google.com/spreadsheets/d/1cvldF_VFA7FYuChoR9a4SIpYcZ1aS80yThNT3iP4T00/edit#gid=1756474524",
                      sheet = "markers-pdgfra")

```

## Normalize, HVGs

```{r}

sces <- logNormCounts(sces, assay.type = "wta")

# find HVGs
mgv <- modelGeneVar(sces, block = sces$sample_id)

mgv_pb  <- lapply(mgv$per.block, function(u) {
 o <- order(u$p.value)
 u <- u[o,]
 head(rownames(u), 500)
})

# most are sample-wise (?)
upset(fromList(mgv_pb))

# arbitrary cutoff to pick some HVGs
hvg <- mgv$bio > .01 & mgv$p.value < .01 & mgv$mean > .2
mgv[hvg,] %>% 
  as.data.frame %>% rownames -> hvg
length(hvg)

all(rownames(sces)==rownames(mgv))

mgv <- cbind(mgv, gene_type = rowData(sces)$gene_type)

rowData(sces)[hvg,]$gene_type %>% table
# basically all expressed mouse genes are HV; mainly different b/w
# +ROI and -ROI

# remove mito genes
hvg <- mgv$bio > .01 & mgv$p.value < .01 & mgv$mean > .2 & mgv$gene_type=="mouse_gene"
rn <- rownames(mgv)[hvg]
length(rn)

ggplot(mgv %>% data.frame %>% dplyr::filter(gene_type != "capture"),
       aes(x=mean, y=bio, colour=p.value<.05, shape = gene_type)) +
  geom_point() + facet_wrap(~gene_type)

```

## Dim reduction, UMAP

```{r}

sces <- fixedPCA(sces, subset.row=rn, rank = 30) 
sces <- runUMAP(sces, dimred="PCA")

plotUMAP(sces, colour_by = "sample_id") + facet_wrap(~colour_by)

plotUMAP(sces, colour_by = "total", shape_by = "sample_id", point_size = 4) + 
  facet_wrap(~shape_by)

```

## Do doublet removal

```{r}

# couple adjustments to the object for doublet finding
sces_adj <- sces
counts(sces_adj) <- assay(sces, 1)
colnames(sces_adj) <- sces_adj$sample_id.barcode

sces_nd <- scDblFinder(sces_adj, samples = "sample_id")

plotUMAP(sces_nd, colour_by = "scDblFinder.score")
table(sces_nd$scDblFinder.class)
boxplot(sces_nd$scDblFinder.score ~ sces_nd$scDblFinder.class)

sces_nd <- sces_nd[,sces_nd$scDblFinder.class=="singlet"]

# save filtered-nodoublet object to RDS
#saveRDS(sces_nd, file.path(datadir, "sce_qc-filtered-nodoublets.rds"))

rm(sces); gc()


```

## Clustering

```{r}

myscale <- c(color("muted")(9), gray="lightgray")
names(myscale) <- as.character(1:length(myscale))

set.seed(1976)
nn.clusters <- clusterCells(sces_nd, use.dimred="PCA",
                            BLUSPARAM=NNGraphParam(k=40))
table(nn.clusters)
sces_nd$cluster <- nn.clusters

plotUMAP(sces_nd, colour_by="cluster", shape_by = "sample_id",
         point_size = 4, point_alpha = .9) + 
  scale_color_manual(values = myscale) +
  facet_wrap(~shape_by)

table(sces_nd$sample_id, sces_nd$cluster)

mm <- model.matrix(~cluster, 
                   data=as.data.frame(colData(sces_nd)))

lcounts <- logcounts(sces_nd)

table(rs <- rowSums(lcounts)>50 & rowData(sces_nd)$gene_type == "mouse_gene" )
f <- lmFit(as.matrix(lcounts[rs,]), mm)
f <- eBayes(f)

# topTable(f, coef=2:ncol(mm), number = 10)
tt <- topTable(f, coef=2:ncol(mm), number = 1e6, sort.by = "none")

aac <- aggregateAcrossCells(sces_nd, 
                            sces_nd$cluster,use.assay.type="wta")

calc_entropy <- function(u) {
  p <- u[u>0]
  p <- p/sum(p)
  -sum(p*log(p))
}

# adjust the aggregated counts for the number of cells
agg_counts <- assay(aac,"wta")[rs,]
for(i in 1:ncol(agg_counts))
  agg_counts[,i] <- agg_counts[,i]/sum(agg_counts[,i])*1e6

ents <- apply(agg_counts, 1, calc_entropy)

plot(ents, tt$F, log="y")

df <- data.frame(gene = names(ents), 
                 entropy=ents, Fstat=tt$F,
                 cluster.max = apply(agg_counts, 1, which.max)) %>%
  mutate(order_by = Fstat / entropy) %>%
  dplyr::filter(Fstat > 400, entropy < 1.25) %>%
  arrange(desc(order_by)) %>%
  group_by(cluster.max) %>% slice_max(order_by = order_by, n = 10)

col_anno <- colData(sces_nd)[,c("sample_id","cluster")] %>% as.data.frame

genes <- split(df$gene, df$cluster.max) %>% unlist

# make row annotation
rowanno <- data.frame(Marker = genes) %>% 
  left_join(markers %>% dplyr::select(Marker, Broad_cell_type, Cell_type)) %>%
  transmute(Marker = Marker,
            broad_ct = replace_na(Broad_cell_type, ""),
            celltype = replace_na(Cell_type, "")) %>%
  tibble::column_to_rownames("Marker")

inds <- split(seq_len(ncol(sces_nd)), sces_nd$cluster)

cluster_order <- rev(c(1, 7, 6, 2, 3, 4, 5, 8))
inds <- inds[cluster_order]

ann_colors = list(cluster = myscale[seq_len(length(inds))])

co <- unlist(inds)

ph <- pheatmap(lcounts[genes,co], show_rownames = TRUE,
        show_colnames = FALSE, scale="none",
        annotation_col = col_anno[co,],
        clustering_distance_rows = "correlation",
        clustering_distance_cols = "correlation",
        annotation_row = rowanno,
        cluster_rows = TRUE,
        treeheight_row = 0,
        cluster_cols = FALSE, fontsize_row = 8,
        annotation_colors = ann_colors)

#save_pheatmap_pdf(ph, "cluster-allcells.pdf", width = 10, height = 10)

rownames(altExp(sces_nd))
sort(rowSums(assay(altExp(sces_nd), 1)), decreasing = TRUE)

plotUMAP(sces_nd, colour_by = "ENSMUSG00000016494.9__Cd34")
plotUMAP(sces_nd, colour_by = "ENSMUSG00000028255.6__Clca1")
plotUMAP(sces_nd, colour_by = "ENSMUSG00000009246.14__Trpm5")

plotExpression(sces_nd, colour_by = "cluster",
               x = "cluster",
               features = markers$Marker[1:8])

mm <- sces_nd[,sces_nd$sample_id=="pdgfra_rockroi_multimodal"]

df <- data.frame(colData(mm)[,c("sample_id","sum","detected",
                                "cluster","scDblFinder.score")],
                 as.matrix(t(logcounts(mm)[genes,])),
                 as.matrix(t(assay(altExp(mm), 1))),
                 reducedDim(mm,"UMAP"))

df$cluster <- factor(df$cluster, levels=as.character(cluster_order))

ggplot(df, aes(x=UMAP1, y=UMAP2, colour=cluster)) + 
  geom_point(size = 5) +
  scale_color_manual(values = myscale)

ggplot(df, aes(x=cluster, y=between_roi_egfp.770.1049, colour=cluster)) + 
  geom_jitter(width=.2, size=3, height = .1) +
  scale_y_sqrt() +
  scale_color_manual(values = myscale)

ggplot(df, aes(x=cluster, y=roi_5_chr5.75170495.75170544, colour=cluster)) + 
  geom_jitter(width=.2, size=3, height = .1) +
  scale_y_sqrt() +
  scale_color_manual(values = myscale)

```

### Quick view of markers

```{r}


df <- data.frame( colData(sces_nd)[,c("sample_id","cluster")],
                  as.matrix(t(logcounts(sces_nd)[markers$Marker,])) )

# loop through all markers
ps <- lapply(markers$Marker, function(u) {
  ggplot(df, aes(x=cluster, y=.data[[u]],
                 colour = cluster)) +
    geom_jitter(height=0.05, width=.2) +
    ggtitle(paste0(u, "\n",
            markers$Broad_cell_type[markers$Marker==u], " // ",
            markers$Cell_type[markers$Marker==u])) + ylab("") +
    scale_color_manual(values = myscale)
})

ml <- marrangeGrob(ps, nrow=2, ncol=3)

#ggsave("allmarkers-allcells.pdf", ml, width = 12, height = 8)

```

## Save output

```{r}
# save clustered object to RDS

#saveRDS(sces_nd, file.path(datadir, "sce_qc-filtered-nodoublets-clustered.rds"))

```

### sessionInfo()

```{r}

sessionInfo()

```
