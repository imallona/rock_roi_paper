---
title: "01_pdgfra_experiment_e-unimodal_vs_multimodal.qmd"
author: "Mark Robinson, Izaskun Mallona & Giulia Moro"
format: 
  html:
    toc: true
    embed-resources: true
    keep_md: true
---

### From Izaskun to do: 

```{r}

# subtract and show the three heatmaps (downsampled cells x downsampled HVGs for uni, for multi, and for the delta): logCPMs. 

#And a corr coefficient collapsing the rows/columns and correlating them perhaps

```



## Load packages, load data

```{r, warning=FALSE, message=FALSE}

rm(list=ls())

library(SingleCellExperiment)
library(scran)
library(ggplot2)
library(dplyr)
library(scater)
library(reshape2)
library(UpSetR)
library(limma)
library(cowplot)
library(pheatmap)
library(readr)
library(scuttle)
library(plotROC)
library(here)
library(Matrix)
library(scDblFinder)
library(edgeR)
library(ggpubr)
library(corrplot)
library(viridis)

rdss <- dir(here("01_pdgfra_experiment"), "^pd.*rds$", 
            recursive = TRUE, full.names = TRUE)

names(rdss) <- gsub("_sce.rds", "", basename(rdss))
rdss

datadir <- dirname(rdss)[1]

sces <- mapply(function(u,v)  {
  rds <- readRDS(u)
  rds$sample_id <- v
  rds$sample_id.barcode <- paste0(v,".",colnames(rds))
  colnames(rowData(rds)) <- c("name", "type", "value")
  g <- grepl("^ENS", rownames(rds))
  rownames(rds)[g] <- paste0(rownames(rds)[g], 
                             "__", rowData(rds)$name[g])
  rowData(rds)$gene_type <- "capture"
  k <- grepl("^ENSG", rownames(rds))
  rowData(rds)$gene_type[k] <- "human_gene"
  k <- grepl("^ENSMUS", rownames(rds))
  rowData(rds)$gene_type[k] <- "mouse_gene"
  k <- grepl("^mt", rowData(rds)$name)
  rowData(rds)$gene_type[k] <- "mouse_mito"
  k <- grepl("^MT", rowData(rds)$name)
  rowData(rds)$gene_type[k] <- "human_mito"
  rds
}, rdss, names(rdss))

sces<-sces[c("pdgfra_rockroi_multimodal","pdgfra_rockroi_unimodal")]
sce <- Reduce(cbind, sces)

table(sce$sample_id)

```

### Filtering dataset

```{r}

rd <- rowData(sce)
sce <- addPerCellQCMetrics(sce, assay.type = "wta",
                           subsets=list(capture=rd$gene_type=="capture",
                                        mouse_gene=rd$gene_type=="mouse_gene",
                                        mouse_mito=rd$gene_type=="mouse_mito"))

cd <- colData(sce) %>% as.data.frame

ggplot(cd, aes(x = total, y = subsets_mouse_mito_percent)) +
  geom_point() + scale_x_log10() + scale_y_sqrt() +
  facet_wrap(~sample_id) + 
  geom_hline(yintercept=c(1,30), colour="orange") +
  geom_vline(xintercept=c(2000), colour="orange") +
  geom_density2d()

# crude filter

mito <- sce$subsets_mouse_mito_percent
sces <- sce[,sce$total>2000 & mito>1 & mito<30]
sces <- sces[rowSums(assay(sces,1))>2 | rowData(sces)$gene_type=="capture" ,] 

```

### Doublet removal

```{r}

sces_adj <- sces
counts(sces_adj) <- assay(sces, 1)
colnames(sces_adj) <- sces_adj$sample_id.barcode

sces_nd <- scDblFinder(sces_adj, samples = "sample_id")

sces_nd <- sces_nd[,sces_nd$scDblFinder.class=="singlet"]

saveRDS(sces, file.path(datadir, "uni_multi_filtered_doublet_removed.rds"))

rm(sces,sces_nd,sce)

sce<-readRDS(file.path(datadir, "uni_multi_filtered_doublet_removed.rds"))

table(sce$sample_id)

```

### Calculating HVGs and logcpms

```{r}

# calculating lognormcounts

sce <- logNormCounts(sce, assay.type = "wta")

# finding HVGs and getting the most variable

mgv <- modelGeneVar(sce) #removed sample block
mgv_pb<-head(rownames(mgv[order(mgv$p.value),]),500)

# most highly expressed HVGs (to prevent having too many 0s) and taking top 100

common_genes<-mgv_pb
expression_common_genes<-assay(sce)[common_genes,]
high_hvgs<-names(sort(rowSums(expression_common_genes),decreasing=TRUE)[1:100])

# subsetting objects

pdgfra_unimodal<-sce[,sce$sample_id==c("pdgfra_rockroi_unimodal")]
pdgfra_multimodal<-sce[,sce$sample_id==c("pdgfra_rockroi_multimodal")]

# finding overlapping barcodes

colnames(pdgfra_unimodal)<-gsub("pdgfra_rockroi_unimodal.","",colnames(pdgfra_unimodal))
colnames(pdgfra_multimodal)<-gsub("pdgfra_rockroi_multimodal.","",colnames(pdgfra_multimodal))

common<-intersect(colnames(pdgfra_unimodal),colnames(pdgfra_multimodal))

length(colnames(pdgfra_unimodal))
length(colnames(pdgfra_multimodal))
length(common)

# subsetting with common barcodes --> the order of the barcodes will be the same

pdgfra_unimodal<-pdgfra_unimodal[,common]
pdgfra_multimodal<-pdgfra_multimodal[,common]

# generating DGE

dge_unimodal<-convertTo(pdgfra_unimodal,type="edgeR")
dge_multimodal<-convertTo(pdgfra_multimodal,type="edgeR")

# calculating cpms

dge_unimodal_logcpm<-cpm(dge_unimodal,log=TRUE,prior.count=1) #prior.count: number to sum to not have 0
dge_multimodal_logcpm<-cpm(dge_multimodal,log=TRUE,prior.count=1)

# subsetting dge for top HVGs in common between the two samples and take top 100

dge_unimodal_logcpm<-dge_unimodal_logcpm[high_hvgs,]
dge_multimodal_logcpm<-dge_multimodal_logcpm[high_hvgs,]

# generating list from the dge objects

l_dge_unimodal_logcpm<-split(dge_unimodal_logcpm, 1:nrow(dge_unimodal_logcpm))
names(l_dge_unimodal_logcpm)<-rownames(dge_unimodal_logcpm)

l_dge_multimodal_logcpm<-split(dge_multimodal_logcpm, 1:nrow(dge_multimodal_logcpm))
names(l_dge_multimodal_logcpm)<-rownames(dge_multimodal_logcpm)

# putting them in a dataframe

pdgfra_dataframe<-data.frame(as.numeric(unlist(l_dge_unimodal_logcpm)),as.numeric(unlist(l_dge_multimodal_logcpm)))
colnames(pdgfra_dataframe)<-c("unimodal","multimodal")

# calculating correlations

cor(pdgfra_dataframe$unimodal,pdgfra_dataframe$multimodal,method="pearson")
cor(pdgfra_dataframe$unimodal,pdgfra_dataframe$multimodal,method="spearman")

```

### Heatmap with subtracting logcpms and using 100 cells

```{r}

df_dge_unimodal_logcpm<-as.data.frame(dge_unimodal_logcpm)[,1:100]
df_dge_multimodal_logcpm<-as.data.frame(dge_multimodal_logcpm)[,1:100]
diff_unimodal_multimodal<-df_dge_unimodal_logcpm-df_dge_multimodal_logcpm[,1:100]

pheatmap(df_dge_unimodal_logcpm,
         cluster_rows=FALSE,
         cluster_cols=FALSE,
         fontsize_col=5,
         fontsize_row=5)

# multimodal heatmap

pheatmap(df_dge_multimodal_logcpm,
         cluster_rows=FALSE,
         cluster_cols=FALSE,
         fontsize_col=5,
         fontsize_row=5)

# difference heatmap

pheatmap(diff_unimodal_multimodal,
         cluster_rows=FALSE,
         cluster_cols=FALSE,
         fontsize_col=5,
         fontsize_row=5)

# histograms and density plots with deltas

hist(unlist(diff_unimodal_multimodal),
     main="")

df<-as.data.frame(unlist(diff_unimodal_multimodal))

ggplot(df,aes(x=`unlist(diff_unimodal_multimodal)`))+
  geom_density()+
  theme_bw()+
  xlab("delta")

```


