---
title: "01_pdgfra_experiment_f-unimodal_multimodal_paper_figures"
author: "Mark Robinson, Izaskun Mallona & Giulia Moro"
format: 
  html:
    toc: true
    embed-resources: true
    keep_md: true
---

### Loading libraries and data

```{r,warning=FALSE, message=FALSE}

rm(list=ls())

library(SingleCellExperiment)
library(scran)
library(ggplot2)
library(dplyr)
library(scater)
library(reshape2)
library(UpSetR)
library(limma)
library(cowplot)
library(pheatmap)
library(readr)
library(scuttle)
library(plotROC)
library(here)
library(Matrix)
library(scDblFinder)
library(edgeR)
library(ggpubr)
library(khroma)
library(gridExtra)
library(corrplot)
library(RColorBrewer)
library(ggrastr)

rdss <- dir(here("01_pdgfra_experiment"), "_sce.rds", 
            recursive = TRUE, full.names = TRUE)

names(rdss) <- gsub("_sce.rds", "", basename(rdss))

datadir <- dirname(rdss)[1]

sce<-readRDS(file.path(datadir, "uni_multi_filtered_doublet_removed.rds"))

```

### Setting up knitr

```{r}

knitr::opts_chunk$set(fig.width = 3,
               fig.height = 3,
               fig.align = "center",
               include = TRUE,
               dev = c("png","svg"),
               cache=TRUE,
               cache.lazy = FALSE,
               warning = TRUE,
               message = TRUE)

```

### Themes

```{r}

rock_roi_theme<-function(){
  theme(axis.text = element_text(size = 5), 
        plot.title=element_text(size=5,face="bold",hjust=0.5),
        axis.title=element_text(size=5,face="bold"),
        strip.text=element_text(size=5,face="bold"),
        legend.title=element_text(size=5,face="bold"),
        legend.text=element_text(size=5),
        aspect.ratio=1,
        legend.key.size = unit(0.5, 'cm'),
        legend.margin=margin(0,0,0,0),
        legend.box.margin=margin(-5,-5,-5,-5),
        legend.title.align=0.5,
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
}

rock_roi_theme_multiple_panels<-function(){
    theme(axis.text = element_text(size = 5), 
        plot.title=element_text(size=5,face="bold",hjust=0.5),
        axis.title=element_text(size=5,face="bold"),
        strip.text=element_text(size=5,face="bold"),
        aspect.ratio=1,
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        strip.background = element_blank(),
        legend.key.size = unit(0.5, 'cm'),
        legend.title=element_text(size=5,face="bold"),
        legend.text=element_text(size=5),
        legend.margin=margin(0,0,0,0),
        legend.box.margin=margin(-5,-5,-5,-5),
        legend.title.align=0.5,
        panel.border = element_rect(colour = "black", fill = NA))
}

```

### Defining colors

```{r}

myscale<-c(color("muted")(9), gray="darkgrey", 
             black = "black", darkorange = "darkorange",
             yellowgreen = "yellowgreen")

# defining colors for samples and for species

names(myscale) <- c("unmod","unmod_roi","rock","egfp_cds","rockroi","human","unknown","mouse","tdtom_cds","no_detection","doublets","unmod_n1","high")

#plot(1:13, col=myscale, pch=19, cex=4)

```

### Calculating HVGs and logcpms

```{r}

# calculating lognormcounts

sce <- logNormCounts(sce, assay.type = "wta")

# finding HVGs and getting the most variable

mgv <- modelGeneVar(sce) #removed sample block
mgv_pb<-head(rownames(mgv[order(mgv$p.value),]),500)

# most highly expressed HVGs (to prevent having too many 0s) and taking top 100

common_genes<-mgv_pb
expression_common_genes<-assay(sce)[common_genes,]
high_hvgs<-names(sort(rowSums(expression_common_genes),decreasing=TRUE)[1:100])

# subsetting objects

pdgfra_unimodal<-sce[,sce$sample_id==c("pdgfra_rockroi_unimodal")]
pdgfra_multimodal<-sce[,sce$sample_id==c("pdgfra_rockroi_multimodal")]

# finding overlapping barcodes

colnames(pdgfra_unimodal)<-gsub("pdgfra_rockroi_unimodal.","",colnames(pdgfra_unimodal))
colnames(pdgfra_multimodal)<-gsub("pdgfra_rockroi_multimodal.","",colnames(pdgfra_multimodal))

common<-intersect(colnames(pdgfra_unimodal),colnames(pdgfra_multimodal))

length(colnames(pdgfra_unimodal))

length(colnames(pdgfra_multimodal))

length(common)

# subsetting with common barcodes --> the order of the barcodes will be the same

pdgfra_unimodal<-pdgfra_unimodal[,common]
pdgfra_multimodal<-pdgfra_multimodal[,common]

# generating DGE

dge_unimodal<-convertTo(pdgfra_unimodal,type="edgeR")
dge_multimodal<-convertTo(pdgfra_multimodal,type="edgeR")

# calculating cpms

dge_unimodal_logcpm<-cpm(dge_unimodal,log=TRUE,prior.count=1) #prior.count: number to sum to not have 0
dge_multimodal_logcpm<-cpm(dge_multimodal,log=TRUE,prior.count=1)

# subsetting dge for top HVGs in common between the two samples and take top 100

dge_unimodal_logcpm<-dge_unimodal_logcpm[high_hvgs,]
dge_multimodal_logcpm<-dge_multimodal_logcpm[high_hvgs,]

# generating list from the dge objects

l_dge_unimodal_logcpm<-split(dge_unimodal_logcpm, 1:nrow(dge_unimodal_logcpm))
names(l_dge_unimodal_logcpm)<-rownames(dge_unimodal_logcpm)

l_dge_multimodal_logcpm<-split(dge_multimodal_logcpm, 1:nrow(dge_multimodal_logcpm))
names(l_dge_multimodal_logcpm)<-rownames(dge_multimodal_logcpm)

# putting them in a dataframe

pdgfra_dataframe<-data.frame(as.numeric(unlist(l_dge_unimodal_logcpm)),as.numeric(unlist(l_dge_multimodal_logcpm)))
colnames(pdgfra_dataframe)<-c("unimodal","multimodal")

# calculating correlations for whole dataset

cor(pdgfra_dataframe$unimodal,pdgfra_dataframe$multimodal,method="pearson")

cor(pdgfra_dataframe$unimodal,pdgfra_dataframe$multimodal,method="spearman")

```

### Density plots of Pearson correlation of logCPMs between all cells 

```{r}
df_dge_unimodal_logcpm<-as.data.frame(dge_unimodal_logcpm)
df_dge_multimodal_logcpm<-as.data.frame(dge_multimodal_logcpm)

test<-cor(df_dge_unimodal_logcpm,df_dge_multimodal_logcpm,method="pearson")

diagonal<-diag(test) # use the diagonal because they will be the same cells 

df_diagonal<-as.data.frame(diagonal)

plot1<-ggplot(df_diagonal,aes(x=diagonal))+
  geom_density(bw=0.05)+
  theme_bw()+
  rock_roi_theme()+
  xlab("pearson corr")

plot1<-rasterize(plot1, layers='Point', dpi=1000)

plot1

```

### Based on cell type annotation 

```{r}

sce_labelled<-readRDS(file.path(datadir, "sce_qc-filtered-nodoublets-clustered-annotated.rds"))

cd<-as.data.frame(colData(sce_labelled))

# in dataset have the rock_roi_multimodal so taking that sample

cd_multi<-cd[cd$sample_id=="rockroi",]

# subsetting for same barcodes in the different objects

rownames(cd_multi)<-gsub("pdgfra_rockroi_multimodal.","",rownames(cd_multi))
cd_multi<-cd_multi[intersect(common,rownames(cd_multi)),] # some barcodes were filtered out during QC

df_dge_unimodal_logcpm<-df_dge_unimodal_logcpm[,intersect(common,rownames(cd_multi))]
df_dge_multimodal_logcpm<-df_dge_multimodal_logcpm[,intersect(common,rownames(cd_multi))]

combined<-data.frame(unimodal=unlist(df_dge_unimodal_logcpm, use.names = TRUE),multimodal=unlist(df_dge_multimodal_logcpm, use.names = TRUE))

# adding annotation --> this takes looong time, need to optimize 

combined$annotation<-NA

for (i in unique(gsub('[[:digit:]]+', '', rownames(combined)))){
  rows<-grep(i,rownames(combined))
  combined$annotation[rows]<-cd_multi[i,]$annotation
}

table(combined$annotation)/100 

# generating list with correlations for each cell type so easier to plot later (also takes some time)

all_cors<-list()

for (i in unique(combined$annotation)){
  corrs<-c()
  sub<-combined[combined$annotation==i,]
  
  for (k in unique(gsub('[[:digit:]]+', '', rownames(sub)))){
    x<-cor(sub[grep(k,rownames(sub)),]$unimodal,
          sub[grep(k,rownames(sub)),]$multimodal,
          method="pearson")
    corrs<-c(corrs,x)
  }
  
  all_cors[[i]]<-corrs
}


# separate correlations for all cell types

# for (i in 1:length(all_cors)){
#   p<-ggplot(data.frame(x=all_cors[[i]]),aes(x=x))+
#   geom_density()+
#   rock_roi_theme()
#   theme_bw()+
#   xlab("spearman corr")+
#   ggtitle(names(all_cors)[i])
#   
#   print(p)
# }

# plotting all correlations overlayed

all_cors_list<-list()

for (i in 1:length(all_cors)){
  all_cors_list[[names(all_cors)[i]]]<-data.frame(values=all_cors[[i]],name=names(all_cors)[i])
}

p_all_cors_list<-bind_rows(all_cors_list)

names(myscale)<-unique(sce_labelled$annotation)

p<-ggplot(p_all_cors_list,aes(x=values,color=name,fill=name))+
  geom_density(alpha=0.1)+
  theme_bw()+
  rock_roi_theme()+
  xlab("pearson corr")+
  scale_color_manual(values=myscale)
  
p<-rasterize(p, layers='Point', dpi=1000)

p

ggsave(file=file.path(datadir,"all_corrs.svg"), plot=p, width=5.4, height=5.4)


```

### Session info

```{r}

sessionInfo()

```

