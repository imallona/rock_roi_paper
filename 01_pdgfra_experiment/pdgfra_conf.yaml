## simulate: True generates fake data and runs the pipeline
simulate: False

## where outputs will be generated at
working_dir: /home/imallona/ebrunner_spectral/pdgfra/

## software stack, will work out of the box if within the supplied docker container
Rbin: R
STAR: STAR
bamCoverage: bamCoverage  # not used anymore
featureCounts: featureCounts
bedtools: bedtools
bedGraphToBigWig: bedGraphToBigWig
faSize: faSize

## run limits
nthreads: 20
per_task_max_nthreads: 5
per_task_max_mem:  103882211200 # not used anymore
max_mem_mb: 350000 ## these are megabytes

## path to whitelists directory
whitelist_path: '/home/imallona/src/rock_roi_method/data/'

## path to the counting module
rock_method_path: '/home/imallona/src/rock_roi_method/'

## fill below these line if `simulate : False` --------------------------------------------------------
## ----------------------------------------------------------------------------------------------------
## if `simulate: True` then all config below this line will be replaced by
##   hardcoded values (within the Snakefile)

gtf: /home/imallona/ebrunner_spectral/pdgfra/genomes/pdgfra.gtf
genome: /home/imallona/ebrunner_spectral/pdgfra/genomes/pdgfra.fa

## cDNA read length -1
sjdbOverhang: 61

## run mode, one of these (please see the README / docs):
##   'tso off- and ontarget unique'
##   'tso ontarget multi'
##   'all'
run_mode: 'all'

## GTF `source` field (colymn2) identifying on-target rock- or roi- features
capture_gtf_column_2_pattern : 'captured'
featurecounts_t: 'exon' ## feature counting unit for featurecounts
featurecounts_g: 'transcript_id' ## feature grouping unit for featurecounts

## multimodal means they sequenced tso+wta; unimodal that only sequenced wta
samples:
  - name: pdgfra_rockroi_multimodal
    uses:
      cb_umi_fq: /home/imallona/ebrunner_spectral/data/fastqs_pdgfra/325402_1-RoCK_ROI_WTA_S1_R1_001.fastq.gz
      cdna_fq: /home/imallona/ebrunner_spectral/data/fastqs_pdgfra/325402_1-RoCK_ROI_WTA_S1_R2_001.fastq.gz
      expected_cells: 5000
      whitelist: 384x3
  - name: pdgfra_unmod_unimodal
    uses:
      cb_umi_fq: /home/imallona/ebrunner_spectral/data/fastqs_pdgfra/325411_1-Unmod_WTA_S1_R1_001.fastq.gz
      cdna_fq: /home/imallona/ebrunner_spectral/data/fastqs_pdgfra/325411_1-Unmod_WTA_S1_R2_001.fastq.gz
      expected_cells: 5000
      whitelist: 384x3
  - name: pdfgra_rockroi_unimodal
    uses:
      cb_umi_fq: /home/imallona/ebrunner_spectral/data/fastqs_pdgfra/325411_2-RoCK_ROI_WTA_S2_R1_001.fastq.gz
      cdna_fq: /home/imallona/ebrunner_spectral/data/fastqs_pdgfra/325411_2-RoCK_ROI_WTA_S2_R2_001.fastq.gz
      expected_cells: 5000
      whitelist: 384x3

## module counting config

chromosomes:                          # chromosomes to be processed
  - egfp
  - chr5

# input parameters
linker_pattern_for_seq_logo: ^([A-Z]{9})(AATG[A-Z]{9}CCAC) # tso pattern to get tso tail seq logo
linker_pattern_list:                  # list of linkers to be matched with alignment. If no match then CB tag is recovered where possible.
  - ^([A-Z]{9})(AATG[A-Z]{9}CCAC)     # tso linkers
  - ^(A|GT|TCA)?([A-Z]{9})(GTGA[A-Z]{9}GACA)  # wta linkers
seq_logo_filename: tso_seq_logo.png
cb1_len: 9                            # length of first part of CB tag
cb2_len: 9                            # length of second part of CB tag
cb3_len: 9                            # length of third part of CB tag
linker_left_len: 4                    # length of linker on left
linker_right_len: 4                   # length of linker on right
umi_len: 8                            # length of UMI in sS tag
chunk_genomic_area: 1000              # number of base pairs to be processed by each process in multiprocessing

# NOTE: number of rg tag names must be equal to the number of input bam files and in
#   the order of input bam files,
##  which are wta and tso

rg_tag_names:
  - wta
  - tso 

subset_gtf: 1                         # subset gtf file by pattern (1: yes, 0: no)
subset_gtf_output_file: subset.gtf    # output file name of subset of gtf file
subset_gtf_pattern: 'captured'           # filter gtf file by this pattern if subset_gtf = 1
write_final_bam_to_csv: 1             # write final merged bam file to a csv file(1: yes, 0: no)
write_final_bam_header_to_txt: 1      # write final merged bam header to text file (1: yes, 0: no)
nProcessors: 5                        # for BAMs multiprocessing
# nthreads: 5                           # for featureCounts

# output file names and paths
# output_folder: nidhi
# output_folder: ../logs_mod/
# output_folder: ../logs_unmod/
## relative path!
final_merged_file: merged.bam
featureCounts_output_file: featurecounted # NOTE: do not add extension
log_file: log.txt
error_log: error_log.txt
