---
title: "04_leukemia_a_b_preprocessing_and_dim_reduction"
author: "Mark Robinson, Izaskun Mallona & Giulia Moro"
format: 
  html:
    toc: true
    embed-resources: true
    keep_md: true
editor_options: 
  chunk_output_type: console
---

### Load packages, load data 

```{r,warning=FALSE, message=FALSE}

rm(list=ls())

library(SingleCellExperiment)
library(scran)
library(ggplot2)
library(dplyr)
library(scater)
library(reshape2)
library(UpSetR)
library(limma)
library(cowplot)
library(pheatmap)
library(readr)
library(plotROC)
library(here)
library(RColorBrewer)
library(ggnewscale)
library(scales)
library(rmarkdown)
library(irlba)
library(viridis)
library(gridExtra)
library(SummarizedExperiment)
library(googlesheets4)
library(tools)
library(SingleCellExperiment)
library(scDblFinder)
library(scran)
library(scater)
library(ggplot2)
library(dplyr)
library(reshape2)
library(UpSetR)
library(limma)
library(cowplot)
library(pheatmap)
library(readr)
library(plotROC)
library(here)
library(khroma)
library(bluster)

packageVersion("Matrix") # had some issues with the Matrix package version, needs to be 1.6.1

```

### setting up knitr 

```{r}

knitr::opts_chunk$set(fig.width = 10,
               fig.height = 10,
               fig.align = "center",
               include = TRUE,
               dev = c("png","svg"),
               cache=TRUE,
               cache.lazy = FALSE,
               warning = TRUE,
               message = TRUE)

```

### Loading data --> two separate objects, one for sample tags and one for counts

```{r}

rdss <- dir(here("04_leukemia"), "leukemia_patient_sce.rds", 
            recursive = TRUE, full.names = TRUE)

names(rdss) <- gsub("_sce.rds", "", basename(rdss))
datadir <- dirname(rdss)[1]

# counts object

sces <- mapply(function(u,v)  {
  rds <- readRDS(u)
  rds$sample_id <- v
  rds$sample_id.barcode <- paste0(v,".",colnames(rds))
  colnames(rowData(rds)) <- c("name", "type", "value","captured")
  g <- grepl("^ENS", rownames(rds))
  rownames(rds)[g] <- paste0(rownames(rds)[g], 
                             "__", rowData(rds)$name[g])
  rowData(rds)$type <- "capture"
  k <- grepl("^ENSG", rownames(rds))
  rowData(rds)$type[k] <- "human_gene"
  k <- grepl("^ENSMUS", rownames(rds))
  rowData(rds)$type[k] <- "mouse_gene"
  k <- grepl("^mt", rowData(rds)$name)
  rowData(rds)$type[k] <- "mouse_mito"
  k <- grepl("^MT", rowData(rds)$name)
  rowData(rds)$type[k] <- "human_mito"
  rds
}, rdss, names(rdss))

## combine sces

for (i in 1:length(sces)) {
    colnames(sces[[i]]) <- paste0("leukemia_patients",'_',colnames(sces[[i]]))
    colData(sces[[i]])$experiment <- mainExpName(sces[[i]])
    rownames(sces[[i]]) <- paste0(rowData(sces[[i]])$name, "__", rownames(sces[[i]]))
}

sce <-  Reduce(cbind, sces)
rm(sces)

# sampletags object

rdss_sample_tags <- dir(here("04_leukemia"), "sampletags_", 
            recursive = TRUE, full.names = TRUE)

st<-readRDS(rdss_sample_tags)

```

### Code from Izaskun on sample tags

```{r}

colnames(st) <- paste0('leukemia_patients_', colnames(st))

st <- st[c('human_sampletag_10', 'human_sampletag_11'),colnames(sce)]
st <- as.data.frame(as.matrix(t(assay(st))))

standardize <- function(x){
    (x-min(x))/(max(x)-min(x))
}

st$sampletag_10_ratio <- standardize(st$human_sampletag_10) / (standardize(st$human_sampletag_10) + standardize(st$human_sampletag_11))
st$sampletag_11_ratio <- standardize(st$human_sampletag_11) / (standardize(st$human_sampletag_10) + standardize(st$human_sampletag_11))

hist(st$sampletag_10_ratio)
hist(st$sampletag_11_ratio)

(s10_q75 <- quantile(st$sampletag_10_ratio, 0.75, na.rm = TRUE))
(s11_q75 <- quantile(st$sampletag_11_ratio, 0.75, na.rm = TRUE))

st$sampletag <- ifelse(st$sampletag_10_ratio >= s10_q75,
                       yes = 'sampletag10',
                       no = ifelse(st$sampletag_11_ratio >= s11_q75,
                                   yes = 'sampletag11',
                                   no = 'uncertain'))

plot(st$human_sampletag_10, st$human_sampletag_11, pch = 19, cex = 0.5,
     col = as.numeric(as.factor(st$sampletag)))

table(st$sampletag)

stopifnot(all(rownames(st) == colnames(sce)))
colData(sce)$sampletag <- st$sampletag
rm(st)

```

### Removing unknown sample tags

```{r}

sce <- sce[,!is.na(sce$sampletag)]
sce<-sce[,!sce$sampletag=="uncertain"]
table(sce$sampletag)

```

### QC on WTA

```{r}

rowData(sce)$type %>% table

rd <- rowData(sce)
sce <- addPerCellQCMetrics(sce, assay.type = "wta",
                           subsets=list(capture=rd$type=="capture",
                                        human_gene=rd$type=="human_gene",
                                        human_mito=rd$type=="human_mito"))

cd <- colData(sce) %>% as.data.frame

ggplot(cd, aes(x = total,
               y = detected,
               colour = subsets_human_mito_percent)) +
  geom_point() +
  scale_x_log10() + 
  scale_y_log10() +
  geom_density_2d() +
  facet_wrap(~sampletag)

table(cd$sampletag) # not sure why introducing NAs above

ggplot(cd, aes(x = total, y = subsets_human_mito_percent)) +
  geom_point() + 
  scale_x_log10() + 
  scale_y_sqrt() +
  facet_wrap(~sampletag) + 
  geom_hline(yintercept=c(5,48), colour="orange") +
  geom_vline(xintercept=c(1000), colour="orange") +
  geom_density2d()

dim(sce)

```

### Filtering

```{r}

mito <- sce$subsets_human_mito_percent
sce <- sce[,sce$total>1000 & mito>5 & mito<48]
sce <- sce[rowSums(assay(sce,1))>2 | rowData(sce)$type=="capture" ,] 

```

### Look at TSO

```{r}

rowData(sce) %>% as.data.frame %>% tail(29)

rds <- rowData(sce)
tso_qc <- perCellQCMetrics(sce, assay.type = "tso_off_and_ontarget_unique",
                           subsets=list(capture=rds$type=="capture",
                                        human_gene=rds$type=="human_gene",
                                        human_mito=rds$type=="human_mito"))

all(rownames(tso_qc)==colnames(sce))

df <- data.frame(tso_total = tso_qc$total,
                 tso_capture_sum = tso_qc$subsets_capture_sum,
                 tso_mito_percent = tso_qc$subsets_human_mito_percent,
                 wta_total = sce$total,
                 wta_capture_sum = sce$subsets_capture_sum,
                 wta_mito_percent = sce$subsets_human_mito_percent,
                 sample_tag = sce$sampletag)

ggplot(df, aes(x = tso_total, y = wta_total)) +
  geom_point() +
  scale_x_log10() + scale_y_log10() +
  facet_wrap(~sample_tag, ncol = 1)

# confused about this plot, why is wta lower than tso?

ggplot(df, aes(x = tso_capture_sum, y = wta_capture_sum)) + 
  geom_jitter(height = .2) +
  # scale_x_log10() + scale_y_log10() +
  facet_wrap(~sample_tag)

ggplot(df, aes(x = tso_mito_percent, y = wta_mito_percent)) +
  geom_point() +
  # scale_x_log10() + scale_y_log10() +
  facet_wrap(~sample_tag) +
  geom_abline(intercept = 0, slope = 1)

ggplot(df, aes(x = tso_total, y = tso_mito_percent)) +
  geom_point(size = .3) +
  scale_x_sqrt() +
  scale_y_sqrt() +
  # geom_density2d() +
  facet_wrap(~sample_tag)

(rn <- rownames(altExp(sce)))

exprs <- assay(altExp(sce),1)

sort(rowSums(exprs, na.rm = TRUE), decreasing = TRUE) -> sorted

par(mfrow=c(3,6))

for(tso in names(sorted))
  smoothScatter(sce$subsets_human_mito_percent,
             jitter(exprs[tso,]), pch=19, main=tso,
       xlab="human percent",
       ylab=tso)

par(mfrow=c(1,1)) # resetting for other plots 

```

## Dim reduction 

### Heatmap function

```{r}

save_pheatmap_pdf <- function(x, filename, width=7, height=7) {
   stopifnot(!missing(x))
   stopifnot(!missing(filename))
   pdf(filename, width=width, height=height)
   grid::grid.newpage()
   grid::grid.draw(x$gtable)
   dev.off()
}

```

### Normalize, HVGs

```{r}

sce <- logNormCounts(sce, assay.type = "wta")

# find HVGs
mgv <- modelGeneVar(sce, block = sce$sampletag)

mgv_pb  <- lapply(mgv$per.block, function(u) {
 o <- order(u$p.value)
 u <- u[o,]
 head(rownames(u), 1000)
})

upset(fromList(mgv_pb))

# arbitrary cutoff to pick some HVGs
hvg <- mgv$bio > .01 & mgv$p.value < .01 & mgv$mean > .2
mgv[hvg,] %>% 
  as.data.frame %>% rownames -> hvg
length(hvg) # very low number highly variable genes, but maybe can expect this between patient samples?

all(rownames(sce)==rownames(mgv))

mgv <- cbind(mgv, gene_type = rowData(sce)$type)

rowData(sce)[hvg,]$type %>% table

```

### Remove mito genes

```{r}

hvg <- mgv$bio > .01 & mgv$p.value < .01 & mgv$mean > .2 & mgv$gene_type=="human_gene"
rn <- rownames(mgv)[hvg]
length(rn)

ggplot(mgv %>% data.frame %>% filter(gene_type != "capture"),
       aes(x=mean, y=bio, colour=p.value<.05, shape = gene_type)) +
  geom_point() + facet_wrap(~gene_type)

```

### Dim reduction, UMAP

```{r}

sce <- fixedPCA(sce, subset.row=rn, rank = 30) 
sce <- runUMAP(sce, dimred="PCA")

plotUMAP(sce, colour_by = "sampletag") + facet_wrap(~colour_by)

plotUMAP(sce, colour_by = "total", shape_by = "sampletag", point_size = 4) + 
  facet_wrap(~shape_by)

```

### Doublet removal

```{r}

counts(sce) <- assay(sce, 1)
colnames(sce) <- sce$sample_id.barcode

sce <- scDblFinder(sce, samples = "sampletag")

plotUMAP(sce, colour_by = "scDblFinder.score")

table(sce$scDblFinder.class)

boxplot(sce$scDblFinder.score ~ sce$scDblFinder.class)

sce_nd <- sce[,sce$scDblFinder.class=="singlet"]

#saveRDS(sce_nd, file.path(datadir, "sce_sample_tag_filt_nodoublets.rds"))
sce_nd<-readRDS(file.path(datadir, "sce_sample_tag_filt_nodoublets.rds"))

```

### Clustering

```{r}

set.seed(1976)
nn.clusters <- clusterCells(sce_nd, use.dimred="PCA",
                            BLUSPARAM=NNGraphParam(k=30))
table(nn.clusters)

sce_nd$cluster <- nn.clusters

plotUMAP(sce_nd, colour_by="cluster", shape_by = "sampletag",
         point_size = 4, point_alpha = .9) + 
  facet_wrap(~shape_by)

table(sce_nd$sampletag, sce_nd$cluster)

mm <- model.matrix(~cluster, 
                   data=as.data.frame(colData(sce_nd)))

lcounts <- logcounts(sce_nd)

table(rs <- rowSums(lcounts)>50 & rowData(sce_nd)$type == "human_gene" )

f <- lmFit(as.matrix(lcounts[rs,]), mm)

f <- eBayes(f)

topTable(f, coef=2:ncol(mm), number = 10)

tt <- topTable(f, coef=2:ncol(mm), number = 1e6, sort.by = "none")

aac <- aggregateAcrossCells(sce_nd, sce_nd$cluster,use.assay.type="wta")

calc_entropy <- function(u) {
  p <- u[u>0]
  p <- p/sum(p)
  -sum(p*log(p))
}

# adjust the aggregated counts for the number of cells
agg_counts <- assay(aac,"wta")[rs,]
for(i in 1:ncol(agg_counts))
  agg_counts[,i] <- agg_counts[,i]/sum(agg_counts[,i])*1e6

ents <- apply(agg_counts, 1, calc_entropy)

plot(ents, tt$F, log="y")

gs <- rownames(tt)[tt$F > 100 & ents < 1]

df <- data.frame(gene = names(ents), 
                 entropy=ents, Fstat=tt$F,
                 cluster.max = apply(agg_counts, 1, which.max)) %>%
  mutate(order_by = Fstat / entropy) %>%
  filter(Fstat > 400, entropy < 2) %>%
  arrange(desc(order_by)) %>%
  group_by(cluster.max) %>% slice_max(order_by = order_by, n = 5)

col_anno <- colData(sce_nd)[,c("sampletag","cluster")] %>% as.data.frame

inds <- split(seq_len(ncol(sce_nd)), sce_nd$cluster)

set.seed(1976)

cluster_order <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)
inds <- inds[cluster_order]

inds <- lapply(inds, sample, min(table(sce_nd$cluster)), 
               replace = FALSE)

co <- unlist(inds)

genes <- split(df$gene, df$cluster.max) %>% unlist

ph <- pheatmap(lcounts[genes,co], show_rownames = TRUE,
        show_colnames = FALSE, scale="none",
        annotation_col = col_anno[co,],
        clustering_distance_rows = "correlation",
        clustering_distance_cols = "correlation",
        cluster_rows = TRUE,
        treeheight_row = 0,
        cluster_cols = FALSE, fontsize_row = 8)

save_pheatmap_pdf(ph, "cluster.pdf", width = 10, height = 10)

rownames(altExp(sce_nd))

sort(rowSums(assay(altExp(sce_nd), 1)), decreasing = TRUE)

mm<-sce_nd # in this case using both samples

df <- data.frame(colData(mm)[,c("sampletag","sum","detected",
                                "cluster","scDblFinder.score")],
                 as.matrix(t(logcounts(mm)[genes,])),
                 as.matrix(t(assay(altExp(mm), 1))),
                 reducedDim(mm,"UMAP"))

df$cluster <- factor(df$cluster, levels=as.character(cluster_order))

ggplot(df, aes(x=cluster, y=e1a2_roi, colour=cluster)) + 
  geom_jitter(width=.2, size=3, height = .1) +
  scale_y_sqrt() +
  facet_wrap(~sampletag)

ggplot(df, aes(x=cluster, y=e14a2_roi_e14, colour=cluster)) + 
  geom_jitter(width=.2, size=3, height = .1) +
  scale_y_sqrt() +
  facet_wrap(~sampletag)

ggplot(df, aes(x=cluster, y=e14a2_roi_e13, colour=cluster)) + 
  geom_jitter(width=.2, size=3, height = .1) +
  scale_y_sqrt() +
  facet_wrap(~sampletag)

ggplot(df, aes(x=cluster, y=e13a2_roi, colour=cluster)) + 
  geom_jitter(width=.2, size=3, height = .1) +
  scale_y_sqrt() +
  facet_wrap(~sampletag)

ggplot(df, aes(x=cluster, y=e13a2_roi, colour=cluster)) + 
  geom_jitter(width=.2, size=3, height = .1) +
  scale_y_sqrt() +
  facet_wrap(~sampletag)

saveRDS(sce_nd,file.path(datadir,"sces_nd_with_clusters.rds"))
#readRDS(file.path(datadir, "sces_nd_with_clusters.rds"))

```

### Session_info

```{r}

sessionInfo()

```

