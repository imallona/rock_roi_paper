---
title: "04_leukemia_d-coverage_tracks"
author: "Mark Robinson, Izaskun Mallona & Giulia Moro"
format: 
  html:
    toc: true
    embed-resources: true
    keep_md: true
---

### Load packages, load data 

```{r,warning=FALSE, message=FALSE}

rm(list=ls())

library(GenomicRanges)
library(GenomicAlignments)
library(rtracklayer)
library(Gviz)
library(plyranges)
library(seqinr)
library(Rsamtools)
library(googlesheets4)
library(tools)
library(here)
library(SingleCellExperiment)

```

### Setting up knitr 

```{r}

library(knitr)

knitr::opts_chunk$set(fig.width = 14,
               fig.height = 8,
               fig.align = "center",
               include = TRUE,
               dev = c("png","svg"),
               cache.lazy = FALSE,
               cache=TRUE,
               warning = TRUE,
               message = TRUE)

```

### Loading colors

```{r}

myscale<-c(color("muted")(9), gray="darkgrey", 
             black = "black", darkorange = "darkorange",
             yellowgreen = "yellowgreen")

# defining colors for samples and for species

names(myscale) <- c("unmod","unmod_roi","rock","egfp_cds","rockroi","human","unknown","mouse","tdtom_cds","no_detection","doublets","wta","tso")
#plot(1:13, col=myscale, pch=19, cex=4)

```

### In this case can't use bw files since need to subset the objects based on barcodes, start with subsetted .bam files

```{r}

getwd()

bam<-dir(here("04_leukemia"), "*.bam", 
            recursive = TRUE, full.names = TRUE)

names(bam) <- gsub(".bam", "", basename(bam))
names(bam) <- gsub("sub_", "",names(bam))

datadir <- dirname(bam)[1] # folder where the .bam files are 

for (i in 1:length(bam)){
  indexBam(bam[[i]])
}

```

### Defining barcodes belonging to the patients 

```{r}

rdss <- dir(here("04_leukemia"), "sces_nd_with_clusters.rds", 
            recursive = TRUE, full.names = TRUE)

datadir <- dirname(rdss)[1] # folder where the .rds files are 

sce_nd<-readRDS(rdss)

sce_nd_10<-sce_nd[,sce_nd$sampletag=="sampletag10"]
sce_nd_11<-sce_nd[,sce_nd$sampletag=="sampletag11"]

barcodes_10<-gsub("leukemia_patient.","",colnames(sce_nd_10))
barcodes_11<-gsub("leukemia_patient.","",colnames(sce_nd_11))

```

### Importing .gtf file

```{r}

options(ucscChromosomeNames=FALSE)

gtf<-dir(here("04_leukemia"), ".*gtf", 
            recursive = TRUE, full.names = TRUE)

combined_gtf<-import(gtf)

```

### Plots with subsetting based on sample tags 

```{r}

chr<-c("bcr_abl1_e1_a2","bcr_abl1_e13_a2","bcr_abl1_e14_a2")
bam_coverages<-list()
bam_coverages_overlayed<-list()
gms<-list()
modality<-c("wta","tso")

barcodes<-list(barcodes_10,barcodes_11)
names(barcodes)<-c("barcodes_human_10","barcodes_human_11")

for (x in chr){
  coverage_chr<-list()
  
  gm <- GeneRegionTrack(combined_gtf[which(seqnames(combined_gtf)==x),],
                           chromosome=x,
                           name=x,
                           geneSymbol=TRUE,
                           showId=TRUE,
                           transcriptAnnotation="gene")
  
  gm@range$gene<-combined_gtf[which(seqnames(combined_gtf)==x),]$gene_id
  
  displayPars(gm) <- list(fill="grey")
  
  displayPars(gm)<-list(col="black",
                           cex.group=0.5,
                           col.line="black",
                           fontcolor.group="black")
  
  gms[[x]]<-gm
  
  for (k in 1:length(barcodes)){

    z<- GRanges(x, IRanges(start(gm@range)[1]-200,max(end(gm@range))))
    param <- ScanBamParam(which=z,
                          what=c("qname"),
                          tag="CB",
                          tagFilter=list(CB=barcodes[[k]]))
  
  
  gals <- lapply(bam, function(x) {
      readGAlignments(x, use.names = TRUE, param=param)
  })
  
  covs<-lapply(gals,coverage)
  covs<-lapply(covs,function(x) as(x,"GRanges"))
  
  for (i in 1:length(covs)){
    covs[[i]]<-DataTrack(covs[[i]],
                          chromosome=x,
                          name=names(covs)[[i]])
  }
    
  for (i in names(covs)){
    displayPars(covs[[i]])<-list(fill.histogram=TRUE)
  }
  
  tso<- grep("tso",names(covs))
  wta<- grep("wta",names(covs))
  
  for (i in tso){
    displayPars(covs[[i]])<-list(col.histogram="darkgrey",
                                       fill.histogram="darkgrey",
                                       alpha.title = 1, 
                                       alpha = 1)
  }

  for (i in wta){
    displayPars(covs[[i]])<-list(col.histogram="black",
                                       fill.histogram="black",
                                       alpha.title = 1, 
                                       alpha = 1)
  }


    overlays_bam<-list()

    for (i in modality){
      overlays_bam[[i]]<-OverlayTrack(trackList=list(covs[[i]],covs[[i]]))
      displayPars(overlays_bam[[i]])<-list(background.title=myscale[[i]])
    }
    
    ranges<-c()
    for (i in modality){
      ranges[i]<-max(range(c(values(covs[[i]]), 
                     values(covs[[i]]))))
    }
  
    plotTracks(c(overlays_bam,
             gms[[x]]),
           type="histogram",
           main=names(barcodes)[[k]],
           from=start(gms[[x]]@range)[1]-200,
           end=gms[[x]]@end,
           cex.axis = 0.5,
           cex.title=0.5,
           col.axis="black",
           col.title="black",
           col.border.title="black",
           showSampleNames = TRUE,
           lwd.title=0.5,
           ylim=c(0,max(ranges)))
  
    bam_coverages[[x]][[names(barcodes)[[k]]]]<-covs
    bam_coverages_overlayed[[x]][[names(barcodes)[[k]]]]<-overlays_bam
  }
}

```

### Printing session info

```{r}

sessionInfo()

```

