---
title: "leukemia_patient_data_b_preprocessing_and_filtering.qmd"
format:
  html:
    toc: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---
## Load packages, load data

```{r, warning=FALSE, message=FALSE}

rm(list=ls())

library(SingleCellExperiment)
library(scran)
library(ggplot2)
library(dplyr)
library(scater)
library(reshape2)
library(UpSetR)
library(limma)
library(cowplot)
library(pheatmap)
library(readr)
library(plotROC)
library(here)
library(rtracklayer)
library(viridis)
library(scDblFinder)
library(bluster)
library(singleCellTK)
library(BUSpaRse)

wd<-"/Users/gimoro/figure_making_paper/rock_roi_paper/07_analysis_patient_data/data"

rdss <- dir(here("07_analysis_patient_data"), "leukemia_patient.sce", 
            recursive = TRUE, full.names = TRUE)
names(rdss) <- gsub(".sce", "", basename(rdss))
rdss

datadir <- dirname(rdss)[1]

sces <- mapply(function(u,v)  {
  rds <- readRDS(u)
  rds$sample_id <- v
  rds$sample_id.barcode <- paste0(v,".",colnames(rds))
  colnames(rowData(rds)) <- c("name", "type", "value")
  g <- grepl("^ENS", rownames(rds))
  rownames(rds)[g] <- paste0(rownames(rds)[g], 
                             "__", rowData(rds)$name[g])
  rowData(rds)$gene_type <- "capture"
  k <- grepl("^ENSG", rownames(rds))
  rowData(rds)$gene_type[k] <- "human_gene"
  k <- grepl("^ENSMUS", rownames(rds))
  rowData(rds)$gene_type[k] <- "mouse_gene"
  k <- grepl("^mt", rowData(rds)$name)
  rowData(rds)$gene_type[k] <- "mouse_mito"
  k <- grepl("^MT", rowData(rds)$name)
  rowData(rds)$gene_type[k] <- "human_mito"
  rds
}, rdss, names(rdss))

sces <- Reduce(cbind, sces)

```

## QC on WTA

```{r}

rowData(sces)$gene_type %>% table

rownames(sces)[which(rowData(sces)$Gene=="_mito")]

rd <- rowData(sces)
sces <- addPerCellQCMetrics(sces, assay.type = "wta",
                           subsets=list(human_gene=rd$gene_type=="human_gene",
                                        human_mito=rd$gene_type=="human_mito"))

cd <- colData(sces) %>% as.data.frame

ggplot(cd, aes(x = total,
               y = detected,
               colour = subsets_human_mito_percent)) +
  geom_point() +
  scale_x_log10() + scale_y_log10() +
  geom_density_2d(colour = "orange") 

ggplot(cd, aes(x = total, y = subsets_human_mito_percent)) +
  geom_point() + scale_x_log10() + scale_y_sqrt() +
  geom_hline(yintercept=c(1,50), colour="orange") +
  geom_vline(xintercept=c(400,17000), colour="orange") +
  geom_density2d()

ggplot(cd, aes(x = detected, y = subsets_human_mito_percent)) +
  geom_point() + scale_x_log10() + scale_y_sqrt() +
  facet_wrap(~sample_id) + 
  geom_hline(yintercept=c(1,50), colour="orange") +
  geom_vline(xintercept=c(200,3300), colour="orange") +
  geom_density2d()

```

## Before filtering --> want to check what the cell lines look like (will probably have higher genes / transcripts)

## Normalization

```{r}

sces <- logNormCounts(sces, assay.type = "wta")
sces_no_filt<-sces

# find HVGs
mgv_no_filt <- modelGeneVar(sces)

# arbitrary cutoff to pick some HVGs
hvg_no_filt <- which(mgv_no_filt$p.value < .05)
mgv_no_filt[hvg_no_filt,] %>% 
  as.data.frame %>% rownames -> hvg_no_filt
length(hvg_no_filt)

all(rownames(sces_no_filt)==rownames(mgv_no_filt))

mgv_no_filt <- cbind(mgv_no_filt, gene_type = rowData(sces_no_filt)$gene_type)

rowData(sces_no_filt)[hvg_no_filt,]$gene_type %>% table
# basically all expressed mouse genes are HV; mainly different b/w
# +ROI and -ROI

# remove mito genes
hvg_no_filt <- which(mgv_no_filt$p.value < .05 & mgv_no_filt$gene_type=="human_gene")
rn_no_filt <- rownames(mgv_no_filt)[hvg_no_filt]
length(rn_no_filt)

ggplot(mgv_no_filt %>% data.frame,
       aes(x=mean, y=bio, colour=p.value<.05, shape = gene_type)) +
  geom_point() + facet_wrap(~gene_type)

```

## UMAP plot based on total, detected and  y chromosome %

```{r}

sces_no_filt <- fixedPCA(sces_no_filt, subset.row=rn_no_filt, rank = 30) 
sces_no_filt <- scater::runUMAP(sces_no_filt, dimred="PCA")

scater::plotUMAP(sces_no_filt, colour_by = "total")
scater::plotUMAP(sces_no_filt, colour_by = "detected")
scater::plotUMAP(sces_no_filt, colour_by = "subsets_human_mito_percent")

```

## Y chromosome expression signature, need to average the signature expression

```{r}

gtf <- rtracklayer::import(file.path(wd,"combined.gtf"))
y_chromosome <- gtf[which(seqnames(gtf)=="chrY"),]

y_signature <- paste0(y_chromosome$gene_id,"__",y_chromosome$gene_name) # 7919 genes
length(which(y_signature %in% rownames(sces_no_filt))) # all genes

# need to uniq them

y_signature <- unique(y_signature) # 566 genes

y_matrix <- assay(sces_no_filt)[y_signature, ]

y_expression <- colSums(y_matrix)

colData(sces_no_filt)$y_expression <- y_expression

scater::plotUMAP(sces_no_filt, colour_by = "y_expression")

# no change in Y expression signature?

```

## X chromosome expression signature, need to average the signature expression

```{r}

x_chromosome <- gtf[which(seqnames(gtf)=="chrX"),]

x_signature <- paste0(x_chromosome$gene_id,"__",x_chromosome$gene_name) # 7919 genes
length(which(x_signature %in% rownames(sces_no_filt))) # all genes

x_signature <- unique(x_signature) # 2423 genes

x_matrix <- assay(sces_no_filt)[x_signature, ]

x_expression <- colSums(x_matrix)

colData(sces_no_filt)$x_expression <- x_expression

scater::plotUMAP(sces_no_filt, colour_by = "x_expression")

rm (sces_no_filt,mgv_no_filt,rn_no_filt,hvg_no_filt)

```

## Crude filter --> no filtering based on upper bound total or detected

```{r}

# crude filter
dim(sces)
mito <- sces$subsets_human_mito_percent
sces <- sces[,sces$detected>200 & mito>1 & mito<50]
# sces <- sces[rowSums(assay(sces,1))>2 ,]  # don't b/c removes from off/on target mtx
sces <- sces[rowSums(assay(sces,1))>2,] 
dim(sces)

# save filtered to RDS

#saveRDS(sces, file.path(wd, "patient_sce_qc-filtered.rds"))
sces_filt<-readRDS(file.path(wd, "patient_sce_qc-filtered.rds"))

# remove extra things
rm(cd, sce,sces); gc()

```

## Rerun clustering based on filtered dataset

```{r}

# find HVGs
mgv <- modelGeneVar(sces_filt)

# arbitrary cutoff to pick some HVGs
hvg <- which(mgv$p.value < .05)
mgv[hvg,] %>% 
  as.data.frame %>% rownames -> hvg
length(hvg)

all(rownames(sces_filt)==rownames(mgv))

mgv <- cbind(mgv, gene_type = rowData(sces_filt)$gene_type)

rowData(sces_filt)[hvg,]$gene_type %>% table
# basically all expressed mouse genes are HV; mainly different b/w
# +ROI and -ROI

# remove mito genes
hvg <- which(mgv$p.value < .05 & mgv$gene_type=="human_gene")
rn <- rownames(mgv)[hvg]
length(rn)

ggplot(mgv %>% data.frame,
       aes(x=mean, y=bio, colour=p.value<.05, shape = gene_type)) +
  geom_point() + facet_wrap(~gene_type)

```

## Visualize cells

```{r}

set.seed(1976)

sces_filt <- fixedPCA(sces_filt, subset.row=rn, rank = 30) 
sces_filt <- scater::runUMAP(sces_filt, dimred="PCA")

scater::plotUMAP(sces_filt, colour_by = "total")
scater::plotUMAP(sces_filt, colour_by = "detected")
scater::plotUMAP(sces_filt, colour_by = "subsets_human_mito_percent")

```

## Plot specific cell type marker

```{r}

# from ATCC: https://www.atcc.org/products/crl-1929
#The cells express multiple B lineage markers, but do not express T cell markers.
#The cells are positive for the beta-2-microglobulin, Leu12, My7 (CD13), OKT9 (CD71), OKT10 (CD38) and CALLA (CD10) antigens.

#They are are negative for CB1, Leu 1 (CD5), Leu2 (CD8), Leu3 (CD4), Leu4 (CD3), Leu5 (CD2), Leu6 (CD1a), Leu9, Leu M1 (CD15), My9 (CD33), #surface immunoglobulin (sIg -) and Epstein-Barr virus

# Found gene set for cell line: https://maayanlab.cloud/Harmonizome/gene_set/SUP-B15/Klijn+et+al.%2C+Nat.+Biotechnol.%2C+2015+Cell+Line+Gene+Expression+Profiles

rownames(sces_filt)[grep("TFRC",rownames(sces_filt))]

# General markers --> cells should be positive for this 

scater::plotUMAP(sces_filt, colour_by = "ENSG00000072274.13__TFRC") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") # cell lines should be positive for this, its CD71

scater::plotUMAP(sces_filt, colour_by = "ENSG00000196549.13__MME") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") # cell lines should be positive for this, its the CALLA antigen

scater::plotUMAP(sces_filt, colour_by = "ENSG00000166710.21__B2M") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") # cell lines should be positive for this

scater::plotUMAP(sces_filt, colour_by =  "ENSG00000004468.13__CD38") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") # cell lines should be positive for this


# General markers --> cells should be negative for this 


scater::plotUMAP(sces_filt, colour_by = "ENSG00000110448.11__CD5") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") 

scater::plotUMAP(sces_filt, colour_by = "ENSG00000010610.10__CD4") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_filt, colour_by ="ENSG00000116824.5__CD2") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") 

scater::plotUMAP(sces_filt, colour_by = "ENSG00000153563.16__CD8A") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")


# Based on gene set for cell line and looking at few of the top 100 --> cells should be positive for all of these

rownames(sces_filt)[grep("PAN3",rownames(sces_filt))]

scater::plotUMAP(sces_filt, colour_by = "ENSG00000174032.17__SLC25A30") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_filt, colour_by = "ENSG00000113555.6__PCDH12") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_filt, colour_by = "ENSG00000109458.8__GAB1") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_filt, colour_by = "ENSG00000077097.16__TOP2B") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_filt, colour_by = "ENSG00000105866.15__SP4") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_filt, colour_by = "ENSG00000164576.12__SAP30L") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")


```

## Run doublet removal

```{r}

# couple adjustments to the object for doublet finding
sces_adj <- sces_filt
counts(sces_adj) <- assay(sces_filt, 1)

sces_nd <- scDblFinder(sces_adj)

scater::plotUMAP(sces_nd, colour_by = "scDblFinder.score")
table(sces_nd$scDblFinder.class)
boxplot(sces_nd$scDblFinder.score ~ sces_nd$scDblFinder.class)

sces_nd <- sces_nd[,sces_nd$scDblFinder.class=="singlet"]

# save filtered-nodoublet object to RDS
#saveRDS(sces_nd, file.path(wd, "patient_sce_nd-filtered.rds"))
sces_nd<-readRDS(file.path(wd, "patient_sce_nd-filtered.rds"))


rm(sces,sces_filt); gc()


```

## Clustering

```{r}

set.seed(1976)
nn.clusters <- clusterCells(sces_nd, use.dimred="PCA",
                            BLUSPARAM=NNGraphParam(k=40))
table(nn.clusters)
sces_nd$cluster <- nn.clusters

scater::plotUMAP(sces_nd, colour_by="cluster")

table(sces_nd$sample_id, sces_nd$cluster)

mm <- model.matrix(~cluster, 
                   data=as.data.frame(colData(sces_nd)))

lcounts <- logcounts(sces_nd)

table(rs <- rowSums(lcounts)>50 & rowData(sces_nd)$gene_type == "human_gene" )
f <- lmFit(as.matrix(lcounts[rs,]), mm)
f <- eBayes(f)

# topTable(f, coef=2:ncol(mm), number = 10)
tt <- topTable(f, coef=2:ncol(mm), number = 1e6, sort.by = "none")

aac <- aggregateAcrossCells(sces_nd, 
                            sces_nd$cluster,use.assay.type="wta")

calc_entropy <- function(u) {
  p <- u[u>0]
  p <- p/sum(p)
  -sum(p*log(p))
}

# adjust the aggregated counts for the number of cells
agg_counts <- assay(aac,"wta")[rs,]
for(i in 1:ncol(agg_counts))
  agg_counts[,i] <- agg_counts[,i]/sum(agg_counts[,i])*1e6

ents <- apply(agg_counts, 1, calc_entropy)

plot(ents, tt$F, log="y")

df <- data.frame(gene = names(ents), 
                 entropy=ents, Fstat=tt$F,
                 cluster.max = apply(agg_counts, 1, which.max)) %>%
  mutate(order_by = Fstat / entropy) %>%
  dplyr::filter(Fstat > 400, entropy < 1.25) %>%
  arrange(desc(order_by)) %>%
  group_by(cluster.max) %>% slice_max(order_by = order_by, n = 10)

col_anno <- colData(sces_nd)[,c("cluster")] %>% as.data.frame


# Color by same markers as before

scater::plotUMAP(sces_nd, colour_by = "ENSG00000072274.13__TFRC") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") # cell lines should be positive for this, its CD71


scater::plotUMAP(sces_nd, colour_by = "ENSG00000196549.13__MME") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") # cell lines should be positive for this, its the CALLA antigen

scater::plotUMAP(sces_nd, colour_by = "ENSG00000166710.21__B2M") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") # cell lines should be positive for this


scater::plotUMAP(sces_nd, colour_by =  "ENSG00000004468.13__CD38") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red") # cell lines should be positive for this

rownames(sces_nd)[grep("PAN3",rownames(sces_nd))]

scater::plotUMAP(sces_nd, colour_by = "ENSG00000174032.17__SLC25A30") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_nd, colour_by = "ENSG00000113555.6__PCDH12") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_nd, colour_by = "ENSG00000109458.8__GAB1") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_nd, colour_by = "ENSG00000077097.16__TOP2B") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_nd, colour_by = "ENSG00000105866.15__SP4") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_nd, colour_by = "ENSG00000164576.12__SAP30L") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

# also features counts and percent mito

scater::plotUMAP(sces_nd, colour_by = "total")
scater::plotUMAP(sces_nd, colour_by = "detected")
scater::plotUMAP(sces_nd, colour_by = "subsets_human_mito_percent")
scater::plotUMAP(sces_nd, colour_by = "cluster")

# adding y signature 

num_downsampled_y_signature<-which(y_signature %in% rownames(sces_nd))
downsampled_y_signature<-y_signature[num_downsampled_y_signature]

y_matrix <- assay(sces_nd)[downsampled_y_signature, ]
y_expression <- colSums(y_matrix)
sces_nd$y_expression <- y_expression

scater::plotUMAP(sces_nd, colour_by = "y_expression")

scater::plotExpression(sces_nd,
               features=c(downsampled_y_signature),
               colour_by="cluster")+
  facet_wrap(~colour_by)

```

### Detection of BCR and of ABL (similar to cell lines)

```{r}

rownames(sces_nd)[grep("ACTB",rownames(sces_nd))]

table(assay(sces_nd,1)["ENSG00000075624.17__ACTB",])

table(assay(sces_nd,1)["ENSG00000186716.21__BCR",])

table(assay(sces_nd,1)["ENSG00000097007.19__ABL1",])


cd<-colData(sces_nd)

cd$wta_BCR<-assay(sces_nd,1)["ENSG00000186716.21__BCR",]
cd$wta_ABL<-assay(sces_nd,1)["ENSG00000097007.19__ABL1",]

ggplot(cd, aes(x=wta_BCR))+
  geom_histogram()+
  theme_bw()+
  ylab("number of cells")

ggplot(cd, aes(x=wta_ABL))+
  geom_histogram()+
  theme_bw()+
  ylab("number of cells")




# in the cell line

cell_line<-sces_nd[,which(sces_nd$kiel_annotation=="SUP-B15")]

table(assay(cell_line,1)["ENSG00000075624.17__ACTB",])
table(assay(cell_line,1)["ENSG00000186716.21__BCR",])
table(assay(cell_line,1)["ENSG00000097007.19__ABL1",])

scater::plotUMAP(sces_nd, colour_by = "ENSG00000186716.21__BCR") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

scater::plotUMAP(sces_nd, colour_by = "ENSG00000097007.19__ABL1") + 
  scale_colour_gradient2(low="lightgrey",
                         mid="lightgrey",
                         high="red")

```

## Cell cycle --> following https://hbctraining.github.io/scRNA-seq/lessons/cell_cycle_scoring.html

```{r}

#hs.pairs <- readRDS(system.file("exdata", "human_cycle_markers.rds", package="scran"))

# renaming the genes

#changed_names<-sces_nd

#rownames(changed_names)<-sapply(strsplit(rownames(changed_names), "\\."), `[`, 1)

#test<-cyclone(changed_names, hs.pairs, gene.names=rownames(changed_names))

#changed_names$phases<-test$phases


#scater::plotUMAP(changed_names, colour_by = "phases") 

# BCR-ABL in S-Phase cells

#s_phase_cells <- changed_names[,which(changed_names$phases=="S")]

# BCR-ABL in G1

#G1_phase_cells <- changed_names[,which(changed_names$phases=="G1")]

# BCR-ABL in G2M

#G2M_phase_cells <- changed_names[,which(changed_names$phases=="G2M")]

#cd_changed_names<-colData(changed_names)


#cd_changed_names$wta_BCR<-assay(sces_nd,1)["ENSG00000186716.21__BCR",]
#cd_changed_names$wta_ABL<-assay(sces_nd,1)["ENSG00000097007.19__ABL1",]

#ggplot(cd_changed_names, aes(x=wta_BCR,y=detected,color=phases))+
 # geom_point()+
 # theme_bw()

#ggplot(cd_changed_names, aes(x=wta_ABL,y=detected,color=phases))+
#  geom_point()+
#  theme_bw()


# vln plots 

#ggplot(cd_changed_names, aes(x=phases,y=wta_ABL,color=phases))+
#  geom_violin()+
#  theme_bw()

#ggplot(cd_changed_names, aes(x=phases,y=wta_BCR,color=phases))+
#  geom_violin()+
#  theme_bw()


#table(cd_changed_names$phases)

```

## SessionInfo()

```{r}

sessionInfo()

```


